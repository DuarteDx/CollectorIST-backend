import fs from 'fs'
let stdoutStream, stderrStream
const stdoutToFile = () => {
  const access = fs.createWriteStream('./stdout.txt')
  stdoutStream = process.stdout.write
  stderrStream = process.stderr.write
  process.stdout.write = process.stderr.write = access.write.bind(access)
}

const stdoutToFileUndo = () => {
  process.stdout.write = stdoutStream
  process.stderr.write = stderrStream
}

const readFromFile = (path) => {
  return new Promise((resolve, reject) => {
    fs.readFile(path, 'utf8', (err, data) => {
      if (err) {
        return reject(err)
      }
      return resolve(data)
    })
  })
}

const deleteFile = (path) => {
  return new Promise((resolve, reject) => {
    fs.unlink(path, (err) => {
      if (err) {
        return reject(err)
      }
      return resolve()
    })
  })
}

const readFromStdOut = () => {
  return readFromFile('./stdout.txt')
}
const existsFile = (path) => {
  return new Promise((resolve, reject) => {
    fs.access(path, fs.constants.F_OK, function (err) {
      return resolve(!err)
    })
  })
}

const deleteIfExistsFile = async (path) => {
  if (await existsFile(path)) {
    await deleteFile(path)
  }
}

const sleep = async (milliSeconds) => {
  return new Promise(function (resolve, reject) {
    setTimeout(resolve, 100)
  })
}

export {
  stdoutToFile,
  stdoutToFileUndo,
  readFromFile,
  readFromStdOut,
  deleteFile,
  existsFile,
  deleteIfExistsFile,
  sleep
}
