import { testCaseRunner, logger, server } from '#/TestTemplate'
import VirtualToken from 'virtual-u2f'

let requestRegistrationU2f
testCaseRunner('u2f', 'normal', test => {
  test.test('Bootstrap u2f registration', async function (t) {
    logger(['info', 'testing', 'test'], `Bootstrap u2f registration`)
    const options = {
      method: 'GET',
      url: '/api/v1/u2f-registration',
      credentials: {
        type: 'user-session',
        sub: 'ist167033',
        roles: ['user']
      }
    }
    try {
      const response = await server.inject(options)
      requestRegistrationU2f = response.result
      logger(['info', 'testing', 'test'], 'Bootstrap u2f registration end')
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    }
    t.end()
  })

  test.test('Submit u2f registration', async function (t) {
    logger(['info', 'testing', 'test'], `Submit u2f registration`)

    const token = new VirtualToken()
    const resp = await token.HandleRefCodeRegisterRequest(requestRegistrationU2f)

    const options = {
      method: 'POST',
      url: '/api/v1/u2f-registration',
      headers: {
        cookie: 'P_SESSION=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJpc3QxNjcwMzMiLCJyb2xlcyI6W119.yY0DFFxLnWNg-gSggkA2AuOzeLl7M-yCjQ9A9gHZ5fs;P_IS_LOGGED=normal'
      },
      payload: resp
    }
    let response
    try {
      response = await server.inject(options)
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.deepEqual(response.result, true)
      logger(['info', 'testing', 'test'], 'Submit u2f registration end')
      t.end()
    }
  })

  test.test('Submit u2f registration with invalid clientData', async function (t) {
    logger(['info', 'testing', 'test'], `Submit u2f registration with invalid clientData`)

    const token = new VirtualToken()
    const resp = await token.HandleRefCodeRegisterRequest(requestRegistrationU2f)
    resp.clientData = resp.clientData.substring(3)

    const options = {
      method: 'POST',
      url: '/api/v1/u2f-registration',
      headers: {
        cookie: 'P_SESSION=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJpc3QxNjcwMzMiLCJyb2xlcyI6W119.yY0DFFxLnWNg-gSggkA2AuOzeLl7M-yCjQ9A9gHZ5fs;P_IS_LOGGED=normal'
      },
      payload: resp
    }
    let response
    try {
      response = await server.inject(options)
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.deepEqual(response.result, false)
      logger(['info', 'testing', 'test'], 'Submit u2f registration with invalid clientData end')
      t.end()
    }
  })
})
