import { testCaseRunner, logger, server } from '#/TestTemplate'
import VirtualToken from 'virtual-u2f'

let requestSignU2f, token
testCaseRunner('u2f', 'normal', test => {
  test.test('Bootstrap u2f sign', async function (t) {
    logger(['info', 'testing', 'test'], `Bootstrap u2f sign`)
    let options = {
      method: 'GET',
      url: '/api/v1/u2f-registration',
      credentials: {
        type: 'user-session',
        sub: 'ist167033',
        roles: ['user']
      }
    }
    try {
      let response = await server.inject(options)
      const requestRegistrationU2f = response.result
      token = new VirtualToken()
      const resp = await token.HandleRefCodeRegisterRequest(requestRegistrationU2f)

      options = {
        method: 'POST',
        url: '/api/v1/u2f-registration',
        credentials: {
          type: 'user-session',
          sub: 'ist167033',
          roles: ['user']
        },
        payload: resp
      }
      await server.inject(options)
      options = {
        method: 'GET',
        url: '/api/v1/u2f-sign-challenge',
        credentials: {
          type: 'user-session',
          sub: 'ist167033',
          roles: ['user']
        }
      }
      response = await server.inject(options)
      requestSignU2f = response.result
      logger(['info', 'testing', 'test'], 'Bootstrap u2f sign end')
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    }
    t.end()
  })

  test.test('Submit u2f sign', async function (t) {
    logger(['info', 'testing', 'test'], `Submit u2f sign`)
    const resp = await token.HandleRefCodeSignRequest(requestSignU2f)
    const options = {
      method: 'POST',
      url: '/api/v1/u2f-sign-challenge',
      headers: {
        cookie: 'P_SESSION=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJpc3QxNjcwMzMiLCJyb2xlcyI6W119.yY0DFFxLnWNg-gSggkA2AuOzeLl7M-yCjQ9A9gHZ5fs;P_IS_LOGGED=normal'
      },
      payload: resp
    }
    let response
    try {
      response = await server.inject(options)
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.equal(response && response.headers && response.headers['set-cookie'].length, 2)
      logger(['info', 'testing', 'test'], 'Submit u2f sign end')
      t.end()
    }
  })

  test.test('Submit u2f sign without registration', async function (t) {
    logger(['info', 'testing', 'test'], `Submit u2f sign without registration`)
    const resp = await token.HandleRefCodeSignRequest(requestSignU2f)
    const options = {
      method: 'POST',
      url: '/api/v1/u2f-sign-challenge',
      headers: {// Jwt sign with sub: ist155371 and not the register one ist167033
        cookie: 'P_SESSION=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJpc3QxNTUzNzEiLCJyb2xlcyI6W119.RKj3i2p9XxpGsIJYHcVY-K9KpcQl4dZc-tVEgz1iWdg;P_IS_LOGGED=normal'
      },
      payload: resp
    }
    let response
    try {
      response = await server.inject(options)
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.equal(response && response.result && response.result.key, 'requires-two-factor-registration')
      logger(['info', 'testing', 'test'], 'Submit u2f sign without registration end')
      t.end()
    }
  })

  test.test('Submit u2f sign with invalid client data', async function (t) {
    logger(['info', 'testing', 'test'], `Submit u2f sign client data`)
    const resp = await token.HandleRefCodeSignRequest(requestSignU2f)
    resp.clientData = resp.clientData.substring(1)
    const options = {
      method: 'POST',
      url: '/api/v1/u2f-sign-challenge',
      headers: {
        cookie: 'P_SESSION=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJpc3QxNjcwMzMiLCJyb2xlcyI6W119.yY0DFFxLnWNg-gSggkA2AuOzeLl7M-yCjQ9A9gHZ5fs;P_IS_LOGGED=normal'
      },
      payload: resp
    }
    let response
    try {
      response = await server.inject(options)
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.equal(response.result.key, 'not-authorized')
      logger(['info', 'testing', 'test'], 'Submit u2f sign client data end')
      t.end()
    }
  })
})
