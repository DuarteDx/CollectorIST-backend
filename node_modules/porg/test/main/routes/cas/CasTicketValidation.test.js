import { testCaseRunner, logger, server } from '#/TestTemplate'
import axios from 'axios'
import https from 'https'
import qs from 'qs'
import htmlparser from 'htmlparser2'
let fromCasRedirect
const casRedirect =
  'https://cas:8443/cas/login?service=https%3A%2F%2Flocalhost%3A8080%2Fapi%2Fv1%2Fcas-st-handler%2FaHR0cHM6Ly9sb2NhbGhvc3Q6ODA4MA'
testCaseRunner('cas', 'normal', test => {
  test.test('Get cas ticket', async function (t) {
    logger(['info', 'testing', 'test'], `Get cas ticket`)
    let response
    try {
      const agent = new https.Agent({
        rejectUnauthorized: false
      })
      response = await axios.get(casRedirect, { httpsAgent: agent })
      let execution, _eventId, submit
      const parser = new htmlparser.Parser({
        onopentag: function (name, attrs) {
          if (name === 'input') {
            if (attrs.name === 'execution') {
              execution = attrs.value
            }
            if (attrs.name === '_eventId') {
              _eventId = attrs.value
            }
            if (attrs.name === 'submit') {
              submit = attrs.value
            }
          }
        }
      })
      parser.write(response.data)
      parser.end()
      const data = qs.stringify({
        username: 'ist167033',
        password: 'pass',
        execution,
        _eventId,
        submit,
        geolocation: ''
      })
      // console.log(data)
      try { // Because axios thinks 302 is a error
        await axios.post(
          'https://cas:8443/cas/login',
          data,
          {
            httpsAgent: agent,
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'
            },
            maxRedirects: 0
          }
        )
      } catch (err) {
        response = err.response
      }
      fromCasRedirect = response.headers.location.substring(45)
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.equal(response && response.status, 302)
      t.equal(response && response.headers && response.headers.location && response.headers.location.substring(0, 75), 'https://localhost:8080/api/v1/cas-st-handler/aHR0cHM6Ly9sb2NhbGhvc3Q6ODA4MA')
      logger(['info', 'testing', 'test'], 'Get cas ticket end')
      t.end()
    }
  })

  test.test('Get cas-st-handle', async function (t) {
    logger(['info', 'testing', 'test'], `Get cas-st-handle`)
    const options = {
      method: 'GET',
      url: '/api/v1/cas-st-handler/' + fromCasRedirect
    }
    let response
    try {
      response = await server.inject(options)
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.equal(response && response.statusCode, 302)
      t.equal(response && response.headers && response.headers['location'], 'https://localhost:8080')
      t.equal(response && response.headers && response.headers['set-cookie'].length, 2)
      logger(['info', 'testing', 'test'], 'Get cas-st-handle end')
      t.end()
    }
  })
})
