import { testCaseRunner, logger, server } from '#/TestTemplate'

testCaseRunner('errors', 'normal', test => {
  test.test('Get errors', async function (t) {
    logger(['info', 'testing', 'test'], `Get errors`)
    const options = {
      method: 'GET',
      url: '/api/v1/errors',
      credentials: {
        type: 'user-session',
        sub: 'ist167033',
        roles: ['user']
      }
    }
    let response
    const expected = {
      'not-authenticated': 'Você não está autenticado',
      'not-authorized': 'Você não está autorizado',
      'missing-ticket': 'Ticket de CAS em falta',
      'invalid-redirect': 'Redirect inválido',
      'requires-u2f-challenge': 'Você precisa de autenticação u2f',
      'requires-totp-challenge': 'Você precisa de autenticação totp',
      'requires-two-factor-registration': 'Você precisa de configurar uma autenticação two-factor',
      'internal-error': 'Erro Interno',
      'errors-error': 'Erro Interno',
      'validation-error': 'Formato invalido para data submetida',
      'porg-test': 'Teste porg' }
    try {
      response = await server.inject(options)
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.deepEqual(response && response.result, expected)
      logger(['info', 'testing', 'test'], 'Get errors end')
      t.end()
    }
  })

  test.test('Get errors lang en', async function (t) {
    logger(['info', 'testing', 'test'], `Get errors lang en`)
    const options = {
      method: 'GET',
      url: '/api/v1/errors?lang=en',
      credentials: {
        type: 'user-session',
        sub: 'ist167033',
        roles: ['user']
      }
    }
    let response
    const expected = {
      'not-authenticated': 'You are not authenticated',
      'not-authorized': 'You are not authorized',
      'missing-ticket': 'Missing CAS Ticket',
      'invalid-redirect': 'Invalid redirect',
      'requires-u2f-challenge': 'You need u2f authentication',
      'requires-totp-challenge': 'You need totp authentication',
      'requires-two-factor-registration': 'You need to configure two-factor authentication',
      'internal-error': 'Internal Server Error',
      'errors-error': 'Internal Server Error',
      'validation-error': 'Invalid format for data submited',
      'porg-test': 'Porg test'
    }

    try {
      response = await server.inject(options)
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.deepEqual(response && response.result, expected)
      logger(['info', 'testing', 'test'], 'Get errors lang en end')
      t.end()
    }
  })
})
