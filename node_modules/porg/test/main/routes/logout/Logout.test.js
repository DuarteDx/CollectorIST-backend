import { testCaseRunner, logger, server } from '#/TestTemplate'

testCaseRunner('logout', 'normal', test => {
  test.test('Logout', async function (t) {
    logger(['info', 'testing', 'test'], `Logout`)
    const options = {
      method: 'GET',
      url: '/api/v1/logout',
      headers: {
        cookie: 'P_SESSION=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJpc3QxNjcwMzMiLCJyb2xlcyI6W119.yY0DFFxLnWNg-gSggkA2AuOzeLl7M-yCjQ9A9gHZ5fs;P_IS_LOGGED=normal'
      }
    }
    let response
    try {
      response = await server.inject(options)
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.equal(response && response.headers && response.headers['set-cookie'][0].substring(23, 60), 'Expires=Thu, 01 Jan 1970 00:00:00 GMT')
      logger(['info', 'testing', 'test'], 'Logout end')
      t.end()
    }
  })

  test.test('Logout without user session', async function (t) {
    logger(['info', 'testing', 'test'], `Logout without user session`)
    const options = {
      method: 'GET',
      url: '/api/v1/logout'
    }
    let response
    try {
      response = await server.inject(options)
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.equal(response && response.result && response.result.key, 'not-authenticated')
      logger(['info', 'testing', 'test'], 'Logout without user session end')
      t.end()
    }
  })
})
