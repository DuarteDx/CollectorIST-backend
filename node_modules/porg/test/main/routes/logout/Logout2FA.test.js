import { testCaseRunner, logger, server } from '#/TestTemplate'

testCaseRunner('logout', 'normal', test => {
  test.test('Logout 2fa', async function (t) {
    logger(['info', 'testing', 'test'], `Logout 2fa`)
    const options = {
      method: 'GET',
      url: '/api/v1/logout/2fa',
      headers: {
        cookie: 'P_SESSION=eyJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6W10sInR3b0ZhY3RvciI6dHJ1ZSwic3ViIjoiaXN0MTY3MDMzIn0.4-9TjM5aLRqbMM3Snstag2V19ZmnTfeySC5clzJH_wg;P_IS_LOGGED=2fa'
      }
    }
    let response
    try {
      response = await server.inject(options)
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.equal(response && response.headers && response.headers['set-cookie'][1].substring(0, 18), 'P_IS_LOGGED=normal')
      logger(['info', 'testing', 'test'], 'Logout 2fa end')
      t.end()
    }
  })

  test.test('Logout 2fa with normal user session', async function (t) {
    logger(['info', 'testing', 'test'], `Logout 2fa with normal user session`)
    const options = {
      method: 'GET',
      url: '/api/v1/logout/2fa',
      headers: {
        cookie: 'P_SESSION=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJpc3QxNjcwMzMiLCJyb2xlcyI6W119.yY0DFFxLnWNg-gSggkA2AuOzeLl7M-yCjQ9A9gHZ5fs;P_IS_LOGGED=normal'
      }
    }
    let response
    try {
      response = await server.inject(options)
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.equal(response.result.key, 'requires-two-factor-registration')
      logger(['info', 'testing', 'test'], 'Logout 2fa with normal user session end')
      t.end()
    }
  })
})
