import { testCaseRunner, logger, server } from '#/TestTemplate'
import QrCode from 'qrcode-reader'
import base64Img from 'base64-img'
import fs from 'fs'
import Jimp from 'jimp'

const qrCodeRetries = 100
const getQRCodeValue = function (imageBase64) {
  return new Promise(function (resolve, reject) {
    const filepath = base64Img.imgSync(imageBase64, '', '2')
    const buffer = fs.readFileSync(filepath)
    Jimp.read(buffer, function (err, image) {
      if (err) {
        return reject(err)
      }
      const qr = new QrCode()
      qr.callback = function (err, decodedDATA) {
        if (err) {
          console.log(typeof err)
          return reject(err)
        }
        return resolve(decodedDATA.result)
      }
      qr.decode(image.bitmap)
    })
  })
}

testCaseRunner('totp', 'normal', test => {
  test.test('Get totp auth', async function (t) {
    logger(['info', 'testing', 'test'], `Get totp auth`)
    const options = {
      method: 'POST',
      url: '/api/v1/totp-registration',
      headers: {
        cookie: 'P_SESSION=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJpc3QxNjcwMzMiLCJyb2xlcyI6W119.yY0DFFxLnWNg-gSggkA2AuOzeLl7M-yCjQ9A9gHZ5fs;P_IS_LOGGED=normal'
      }
    }
    let retry = 0
    let result
    let protocol
    let query
    let issuer
    try {
      do {
        try {
          const response = await server.inject(options)
          const imageBase64 = response.result.qrcode
          result = await getQRCodeValue(imageBase64)
          retry = qrCodeRetries
        } catch (err) {
          retry++
          if (retry >= qrCodeRetries) {
            throw err
          }
        }
      } while (retry < qrCodeRetries)
      // While because getQRCodeValue fails sometimes
      [protocol, query] = result.split('?')
      const [, issuerVar] = query.split('&')
      // const [, secret] = secretVar.split('=')
      const [, issuerTemp] = issuerVar.split('=')
      issuer = issuerTemp
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.equal(protocol, 'otpauth://totp/Porg:ist167033')
      t.equal(issuer, 'Porg')
      logger(['info', 'testing', 'test'], 'Get totp auth end')
      t.end()
    }
  })
})
