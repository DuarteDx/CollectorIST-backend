import { testCaseRunner, logger, server } from '#/TestTemplate'
import QrCode from 'qrcode-reader'
import base64Img from 'base64-img'
import fs from 'fs'
import Jimp from 'jimp'
import otplib from 'otplib'

const getQRCodeValue = function (imageBase64) {
  return new Promise(function (resolve, reject) {
    const filepath = base64Img.imgSync(imageBase64, '/tmp', 'porg-qrcode-totp')
    const buffer = fs.readFileSync(filepath)
    Jimp.read(buffer, function (err, image) {
      if (err) {
        return reject(err)
      }
      const qr = new QrCode()
      qr.callback = function (err, decodedDATA) {
        if (err) {
          return reject(err)
        }
        return resolve(decodedDATA.result)
      }
      qr.decode(image.bitmap)
    })
  })
}
let token
const qrCodeRetries = 100
testCaseRunner('totp', 'normal', test => {
  test.test('Bootstrap', async function (t) {
    logger(['info', 'testing', 'test'], `Bootstrap totp auth`)
    const options = {
      method: 'POST',
      url: '/api/v1/totp-registration',
      credentials: {
        type: 'user-session',
        sub: 'ist167033',
        roles: ['user']
      }
    }
    let retry = 0
    try {
      do {
        try {
          const response = await server.inject(options)
          const imageBase64 = response.result.qrcode
          const result = await getQRCodeValue(imageBase64)
          const [, query] = result.split('?')
          const [secretVar] = query.split('&')
          const [, secret] = secretVar.split('=')
          token = parseInt(otplib.authenticator.generate(secret))
          retry = qrCodeRetries
        } catch (err) {
          retry++
          if (retry >= qrCodeRetries) {
            throw err
          }
        }
      } while (retry < qrCodeRetries)
      // While because getQRCodeValue fails sometimes
      // const [, issuer] = issuerVar.split('=')
      logger(['info', 'testing', 'test'], 'Bootstrap totp auth end')
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    }
    t.end()
  })

  test.test('Get totp auth', async function (t) {
    logger(['info', 'testing', 'test'], `Submit totp auth`)
    const options = {
      method: 'POST',
      url: '/api/v1/totp-confirmation',
      headers: {
        cookie: 'P_SESSION=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJpc3QxNjcwMzMiLCJyb2xlcyI6W119.yY0DFFxLnWNg-gSggkA2AuOzeLl7M-yCjQ9A9gHZ5fs;P_IS_LOGGED=normal'
      },
      payload: {
        code: token
      }
    }
    let response
    try {
      response = await server.inject(options)
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.equal(response && response.headers && response.headers['set-cookie'].length, 2)
      logger(['info', 'testing', 'test'], 'Submit totp auth end')
      t.end()
    }
  })

  test.test('Get totp auth invalid code', async function (t) {
    logger(['info', 'testing', 'test'], `Submit totp auth`)
    const options = {
      method: 'POST',
      url: '/api/v1/totp-confirmation',
      headers: {
        cookie: 'P_SESSION=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJpc3QxNjcwMzMiLCJyb2xlcyI6W119.yY0DFFxLnWNg-gSggkA2AuOzeLl7M-yCjQ9A9gHZ5fs;P_IS_LOGGED=normal'
      },
      payload: {
        code: token + 1
      }
    }
    let response
    try {
      response = await server.inject(options)
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.equal(response.result.key, 'not-authorized')
      logger(['info', 'testing', 'test'], 'Submit totp auth end')
      t.end()
    }
  })
})
