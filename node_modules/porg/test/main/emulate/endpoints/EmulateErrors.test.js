import { testCaseRunner, logger, server, consoleFormat } from '#/TestTemplate'
import { errorWithKey } from '@/plugins/errors'
import { stdoutToFile, stdoutToFileUndo, readFromStdOut } from '#/utils'
import Joi from 'joi'
testCaseRunner('errors', 'normal', server => {
  server.route({
    path: '/api/emulate/error/joi',
    method: 'GET',
    handler: async (request, h) => {
      return 'test'
    },
    config: {
      validate: {
        query: {
          test: Joi.string().valid(['test']).required()
        }
      },
      plugins: {
        'porg-auth': {
          type: 'user-session',
          roles: ['user']
        }
      }
    }
  })
  server.route({
    path: '/api/emulate/error/exception',
    method: 'GET',
    handler: async (request, h) => {
      throw new Error('Random error')
    },
    config: {
      plugins: {
        'porg-auth': {
          type: 'user-session',
          roles: ['user']
        }
      }
    }
  })
  server.route({
    path: '/api/emulate/error/withkey',
    method: 'GET',
    handler: async (request, h) => {
      if (request.query.type === 'porg') {
        throw errorWithKey('internal-error', { tags: ['alert'] })
      } else if (request.query.type === 'app') {
        throw errorWithKey('porg-test', { tags: ['info'] })
      } else if (request.query.type === 'undefined') {
        throw errorWithKey('porg-undefined-key', { tags: ['alert'] })
      } else if (request.query.type === 'porg-no-level') {
        throw errorWithKey('internal-error', { tags: [] })
      } else if (request.query.type === 'app-no-level') {
        throw errorWithKey('porg-test', { tags: [] })
      } else if (request.query.type === 'no-params') {
        throw errorWithKey('porg-test')
      } else if (request.query.type === 'ctx') {
        throw errorWithKey('porg-test', { tags: ['alert'], ctx: { ctx1: 'ctx1', ctx2: 'ctx2' }, metadata: { met1: 'met1', met2: 'met2' }, cause: 'Message error' })
      }
    },
    config: {
      validate: {
        query: {
          type: Joi.string().valid(['porg', 'app', 'undefined', 'porg-no-level', 'app-no-level', 'no-params', 'ctx']).required()
        }
      },
      plugins: {
        'porg-auth': {
          type: 'user-session',
          roles: ['user']
        }
      }
    }
  })
}, test => {
  test.test('Test throw normal error', async function (t) {
    logger(['info', 'testing', 'test'], `Test throw normal error`)
    const options = {
      method: 'GET',
      url: '/api/emulate/error/exception',
      credentials: {
        type: 'user-session',
        sub: 'ist167033',
        roles: ['user']
      }
    }
    let response
    let expectedError = { 'key': 'internal-error' }
    let expectedLog = { tags: [ 'porg', 'emerg', 'internal-error' ], msg: 'Random error' }
    let log
    try {
      stdoutToFile()
      response = await server.inject(options)
      stdoutToFileUndo()
      log = consoleFormat.convertToJSON(await readFromStdOut())
      expectedError.ctx = log.ctx
      expectedLog.ctx = { $error_hash: response.result.ctx['$error_hash'] }
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.deepEqual(response && response.result, expectedError) // Confirm endpoint result
      t.deepEqual(log, expectedLog) // Confirm log
      logger(['info', 'testing', 'test'], 'Test throw normal error end')
      t.end()
    }
  })

  test.test('Test joi error', async function (t) {
    logger(['info', 'testing', 'test'], `Test joi error`)
    const options = {
      method: 'GET',
      url: '/api/emulate/error/joi',
      credentials: {
        type: 'user-session',
        sub: 'ist167033',
        roles: ['user']
      }
    }
    let response
    let expectedError = { key: 'validation-error', ctx: { test: 'any.required' } }
    let expectedLog = { tags: [ 'porg', 'info', 'validation-error' ], msg: 'child "test" fails because ["test" is required]' }
    let log
    try {
      stdoutToFile()
      response = await server.inject(options)
      stdoutToFileUndo()
      log = consoleFormat.convertToJSON(await readFromStdOut())
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.deepEqual(response && response.result, expectedError) // Confirm endpoint result
      t.deepEqual(log, expectedLog) // Confirm log
      logger(['info', 'testing', 'test'], 'Test joi error end')
      t.end()
    }
  })

  test.test('Test throw porg error', async function (t) {
    logger(['info', 'testing', 'test'], `Test throw porg error`)
    const options = {
      method: 'GET',
      url: '/api/emulate/error/withkey?type=porg',
      credentials: {
        type: 'user-session',
        sub: 'ist167033',
        roles: ['user']
      }
    }

    let response
    let expectedError = { key: 'internal-error' }
    let expectedLog = { tags: [ 'alert', 'internal-error' ], msg: 'internal-error' }
    let log
    try {
      stdoutToFile()
      response = await server.inject(options)
      stdoutToFileUndo()
      log = consoleFormat.convertToJSON(await readFromStdOut())
      expectedError.ctx = log.ctx
      expectedLog.ctx = { $error_hash: response.result.ctx['$error_hash'] }
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.deepEqual(response && response.result, expectedError) // Confirm endpoint result
      t.deepEqual(log, expectedLog) // Confirm log
      logger(['info', 'testing', 'test'], 'Test throw porg error end')
      t.end()
    }
  })

  test.test('Test throw app error', async function (t) {
    logger(['info', 'testing', 'test'], `Test throw app error`)
    const options = {
      method: 'GET',
      url: '/api/emulate/error/withkey?type=app',
      credentials: {
        type: 'user-session',
        sub: 'ist167033',
        roles: ['user']
      }
    }
    let response
    let expectedError = { 'key': 'porg-test', 'ctx': {} }
    let expectedLog = { tags: [ 'info', 'porg-test' ], msg: 'porg-test' }
    let log
    try {
      stdoutToFile()
      response = await server.inject(options)
      stdoutToFileUndo()
      log = consoleFormat.convertToJSON(await readFromStdOut())
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.deepEqual(response && response.result, expectedError) // Confirm endpoint result
      t.deepEqual(log, expectedLog) // Confirm log
      logger(['info', 'testing', 'test'], 'Test throw app error end')
      t.end()
    }
  })

  test.test('Test throw error not defined', async function (t) {
    logger(['info', 'testing', 'test'], `Test throw error not defined`)
    const options = {
      method: 'GET',
      url: '/api/emulate/error/withkey?type=undefined',
      credentials: {
        type: 'user-session',
        sub: 'ist167033',
        roles: ['user']
      }
    }
    let response
    let expectedError = { 'key': 'internal-error' }
    let expectedLog = { tags: [ 'porg', 'emerg', 'internal-error' ], msg: 'No error was defined for key porg-undefined-key' }
    let log
    try {
      stdoutToFile()
      response = await server.inject(options)
      stdoutToFileUndo()
      log = consoleFormat.convertToJSON(await readFromStdOut())
      expectedError.ctx = log.ctx
      expectedLog.ctx = { $error_hash: response.result.ctx['$error_hash'] }
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.deepEqual(response && response.result, expectedError) // Confirm endpoint result
      t.deepEqual(log, expectedLog) // Confirm log
      logger(['info', 'testing', 'test'], 'Test throw error not defined end')
      t.end()
    }
  })

  test.test('Test throw porg error with no log level', async function (t) {
    logger(['info', 'testing', 'test'], `Test throw porg error with no log level`)
    const options = {
      method: 'GET',
      url: '/api/emulate/error/withkey?type=porg-no-level',
      credentials: {
        type: 'user-session',
        sub: 'ist167033',
        roles: ['user']
      }
    }
    let response
    let expectedError = { 'key': 'internal-error' }
    let expectedLog = { tags: [ 'internal-error', 'alert' ], msg: 'internal-error' }
    let log
    try {
      stdoutToFile()
      response = await server.inject(options)
      stdoutToFileUndo()
      log = consoleFormat.convertToJSON(await readFromStdOut())
      expectedError.ctx = log.ctx
      expectedLog.ctx = { $error_hash: response.result.ctx['$error_hash'] }
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.deepEqual(response && response.result, expectedError) // Confirm endpoint result
      t.deepEqual(log, expectedLog) // Confirm log
      logger(['info', 'testing', 'test'], 'Test throw porg error with no log level end')
      t.end()
    }
  })

  test.test('Test throw app error with no log level', async function (t) {
    logger(['info', 'testing', 'test'], `Test throw app error with no log level`)
    const options = {
      method: 'GET',
      url: '/api/emulate/error/withkey?type=app-no-level',
      credentials: {
        type: 'user-session',
        sub: 'ist167033',
        roles: ['user']
      }
    }
    let response
    let expectedError = { key: 'porg-test', ctx: {} }
    let expectedLog = { tags: [ 'porg-test', 'info' ], msg: 'porg-test' }
    let log
    try {
      stdoutToFile()
      response = await server.inject(options)
      stdoutToFileUndo()
      log = consoleFormat.convertToJSON(await readFromStdOut())
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.deepEqual(response && response.result, expectedError) // Confirm endpoint result
      t.deepEqual(log, expectedLog) // Confirm log
      logger(['info', 'testing', 'test'], 'Test throw app error with no log level end')
      t.end()
    }
  })

  test.test('Test throw error with no params', async function (t) {
    logger(['info', 'testing', 'test'], `Test throw error with no params`)
    const options = {
      method: 'GET',
      url: '/api/emulate/error/withkey?type=no-params',
      credentials: {
        type: 'user-session',
        sub: 'ist167033',
        roles: ['user']
      }
    }
    let response
    let expectedError = { key: 'porg-test', ctx: {} }
    let expectedLog = { tags: [ 'porg-test', 'info' ], msg: 'porg-test' }
    let log
    try {
      stdoutToFile()
      response = await server.inject(options)
      stdoutToFileUndo()
      log = consoleFormat.convertToJSON(await readFromStdOut())
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.deepEqual(response && response.result, expectedError) // Confirm endpoint result
      t.deepEqual(log, expectedLog) // Confirm log
      logger(['info', 'testing', 'test'], 'Test throw error with no params end')
      t.end()
    }
  })

  test.test('Test throw error with ctx and metadata', async function (t) {
    logger(['info', 'testing', 'test'], `Test throw error with ctx and metadata`)
    const options = {
      method: 'GET',
      url: '/api/emulate/error/withkey?type=ctx',
      credentials: {
        type: 'user-session',
        sub: 'ist167033',
        roles: ['user']
      }
    }
    let response
    let expectedError = { key: 'porg-test', ctx: { ctx1: 'ctx1', ctx2: 'ctx2' } }
    let expectedLog = { tags: [ 'alert', 'porg-test' ], msg: 'Message error', ctx: { met1: 'met1', met2: 'met2' } }
    let log
    try {
      stdoutToFile()
      response = await server.inject(options)
      stdoutToFileUndo()
      log = consoleFormat.convertToJSON(await readFromStdOut())
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.deepEqual(response && response.result, expectedError) // Confirm endpoint result
      t.deepEqual(log, expectedLog) // Confirm log
      logger(['info', 'testing', 'test'], 'Test throw error with ctx and metadata end')
      t.end()
    }
  })
})
