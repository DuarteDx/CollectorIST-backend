import { testCaseRunner, logger, server } from '#/TestTemplate'
import Joi from 'joi'

testCaseRunner('user-session', 'user-session', server => {
  server.route({
    path: '/api/emulate/auth/user-session',
    method: 'GET',
    handler: async (request, h) => {
      if (request.query.type === 'getPrincipal') {
        return request.getPrincipal()
      } else if (request.query.type === 'getAuthType') {
        return request.getAuthType()
      } else if (request.query.type === 'principalHasRole') {
        return request.principalHasRole('user')
      } else if (request.query.type === 'hasTwoFactor') {
        return request.hasTwoFactor()
      }
    },
    config: {
      plugins: {
        'porg-auth': {
          type: 'user-session',
          roles: ['user', 'session']
        }
      },
      validate: {
        query: {
          type: Joi.string().valid(['getPrincipal', 'getAuthType', 'principalHasRole', 'hasTwoFactor']).required()
        }
      }
    }
  })
}, test => {
  test.test('Test porg auth plugin with user-session getPrincipal', async function (t) {
    logger(['info', 'testing', 'test'], `Test porg auth plugin with user-session getPrincipal`)
    const options = {
      method: 'GET',
      url: '/api/emulate/auth/user-session?type=getPrincipal',
      headers: { // jwt with roles 'user' and 'session'
        cookie: 'P_SESSION=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJpc3QxNjcwMzMiLCJyb2xlcyI6WyJ1c2VyIiwic2Vzc2lvbiJdfQ.DlC8ACMUsOlozobBFoXQEvTsrFqDQnntpmRe25lU7Jw;P_IS_LOGGED=normal'
      }
    }
    let response
    let expected = { username: 'ist167033', roles: ['user', 'session'], type: 'user-session' }
    try {
      response = await server.inject(options)
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.deepEqual(response && response.result, expected) // Confirm endpoint result
      logger(['info', 'testing', 'test'], 'Test porg auth plugin with user-session getPrincipal end')
      t.end()
    }
  })

  test.test('Test porg auth plugin with user-session getAuthType', async function (t) {
    logger(['info', 'testing', 'test'], `Test porg auth plugin with user-session getAuthType`)
    const options = {
      method: 'GET',
      url: '/api/emulate/auth/user-session?type=getAuthType',
      headers: { // jwt with roles 'user' and 'session'
        cookie: 'P_SESSION=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJpc3QxNjcwMzMiLCJyb2xlcyI6WyJ1c2VyIiwic2Vzc2lvbiJdfQ.DlC8ACMUsOlozobBFoXQEvTsrFqDQnntpmRe25lU7Jw;P_IS_LOGGED=normal'
      }
    }
    let response
    try {
      response = await server.inject(options)
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.deepEqual(response && response.result, 'user-session') // Confirm endpoint result
      logger(['info', 'testing', 'test'], 'Test porg auth plugin with user-session getAuthType end')
      t.end()
    }
  })

  test.test('Test porg auth plugin with user-session principalHasRole', async function (t) {
    logger(['info', 'testing', 'test'], `Test porg auth plugin with user-session principalHasRole`)
    const options = {
      method: 'GET',
      url: '/api/emulate/auth/user-session?type=principalHasRole',
      headers: { // jwt with roles 'user' and 'session'
        cookie: 'P_SESSION=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJpc3QxNjcwMzMiLCJyb2xlcyI6WyJ1c2VyIiwic2Vzc2lvbiJdfQ.DlC8ACMUsOlozobBFoXQEvTsrFqDQnntpmRe25lU7Jw;P_IS_LOGGED=normal'
      }
    }
    let response
    try {
      response = await server.inject(options)
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.deepEqual(response && response.result, true) // Confirm endpoint result
      logger(['info', 'testing', 'test'], 'Test porg auth plugin with user-session principalHasRole end')
      t.end()
    }
  })

  test.test('Test porg auth plugin with user-session hasTwoFactor', async function (t) {
    logger(['info', 'testing', 'test'], `Test porg auth plugin with user-session hasTwoFactor`)
    const options = {
      method: 'GET',
      url: '/api/emulate/auth/user-session?type=hasTwoFactor',
      headers: { // jwt with roles 'user' and 'session'
        cookie: 'P_SESSION=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJpc3QxNjcwMzMiLCJyb2xlcyI6WyJ1c2VyIiwic2Vzc2lvbiJdfQ.DlC8ACMUsOlozobBFoXQEvTsrFqDQnntpmRe25lU7Jw;P_IS_LOGGED=normal'
      }
    }
    let response
    try {
      response = await server.inject(options)
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.deepEqual(response && response.result, false) // Confirm endpoint result
      logger(['info', 'testing', 'test'], 'Test porg auth plugin with user-session hasTwoFactor end')
      t.end()
    }
  })

  test.test('Test porg auth plugin with invalid user-session', async function (t) {
    logger(['info', 'testing', 'test'], `Test porg auth plugin with invalid user-session`)
    const options = {
      method: 'GET',
      url: '/api/emulate/auth/user-session',
      headers: { // invalid jwt
        cookie: 'P_SESSION=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIic2Vzc2lvbiJdfQ.DlC8ACMUsOlozobBFoXQEvTsrFqDQnntpmRe25lU7Jw;P_IS_LOGGED=normal'
      }
    }
    let response
    try {
      response = await server.inject(options)
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.equal(response && response.result && response.result.key, 'not-authenticated') // Confirm endpoint result
      logger(['info', 'testing', 'test'], 'Test porg auth plugin with invalid user-session end')
      t.end()
    }
  })

  test.test('Test porg auth plugin with empty array of roles user-session', async function (t) {
    logger(['info', 'testing', 'test'], `Test porg auth plugin with empty array of roles user-session`)
    const options = {
      method: 'GET',
      url: '/api/emulate/auth/user-session',
      headers: { // jwt with empty array of roles
        cookie: 'P_SESSION=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJpc3QxNjcwMzMiLCJyb2xlcyI6W119.yY0DFFxLnWNg-gSggkA2AuOzeLl7M-yCjQ9A9gHZ5fs;P_IS_LOGGED=normal'
      }
    }
    let response
    try {
      response = await server.inject(options)
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.equal(response && response.result && response.result.key, 'not-authorized') // Confirm endpoint result
      logger(['info', 'testing', 'test'], 'Test porg auth plugin with empty array of roles user-session end')
      t.end()
    }
  })

  test.test('Test porg auth plugin with only "user" array of roles user-session', async function (t) {
    logger(['info', 'testing', 'test'], `Test porg auth plugin with only "user" array of roles user-session`)
    const options = {
      method: 'GET',
      url: '/api/emulate/auth/user-session',
      headers: { // jwt with empty array of roles
        cookie: 'P_SESSION=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJpc3QxNjcwMzMiLCJyb2xlcyI6WyJ1c2VyIl19.mxiIBfhLW2LpdYLzCD7V_tSOddjkCI8DtR2wgEFWTls;P_IS_LOGGED=normal'
      }
    }
    let response
    try {
      response = await server.inject(options)
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.equal(response && response.result && response.result.key, 'not-authorized') // Confirm endpoint result
      logger(['info', 'testing', 'test'], 'Test porg auth plugin with only "user" array of roles user-session end')
      t.end()
    }
  })

  test.test('Test porg auth plugin with user-session with additional jwt claims', async function (t) {
    logger(['info', 'testing', 'test'], `Test porg auth plugin with user-session with additional jwt claims`)
    const options = {
      method: 'GET',
      url: '/api/emulate/auth/user-session?type=getPrincipal',
      headers: { // jwt with roles 'user', 'session' and one additional field 'additional'
        cookie: 'P_SESSION=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJpc3QxNjcwMzMiLCJyb2xlcyI6WyJ1c2VyIiwic2Vzc2lvbiJdLCJhZGRpdGlvbmFsIjp0cnVlfQ.GxM-yMcmJGfkiKlF5egbjUh_Jtnu-C4GgoWGjkNxDSI;P_IS_LOGGED=normal'
      }
    }
    let response
    const expected = { username: 'ist167033', roles: ['user', 'session'], type: 'user-session', additional: true }
    try {
      response = await server.inject(options)
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.deepEqual(response && response.result, expected) // Confirm endpoint result
      logger(['info', 'testing', 'test'], 'Test porg auth plugin with user-session with additional jwt claims end')
      t.end()
    }
  })
})
