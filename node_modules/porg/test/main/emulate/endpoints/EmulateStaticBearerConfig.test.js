import { testCaseRunner, logger, server } from '#/TestTemplate'

testCaseRunner('static-bearer', 'static-bearer', server => {
  server.route({
    path: '/api/emulate/auth/static-bearer',
    method: 'GET',
    handler: async (request, h) => {
      return request.auth.credentials
    },
    config: {
      plugins: {
        'porg-auth': {
          type: 'static-bearer',
          key: 'batata'
        }
      }
    }
  })
}, test => {
  test.test('Test porg auth plugin with static-bearer', async function (t) {
    logger(['info', 'testing', 'test'], `Test porg auth plugin with static-bearer`)
    const options = {
      method: 'GET',
      url: '/api/emulate/auth/static-bearer',
      headers: {
        authorization: 'Bearer batataPass'
      }
    }
    let response
    let expected = { type: 'static-bearer', key: 'batata' }
    try {
      response = await server.inject(options)
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.deepEqual(response && response.result, expected) // Confirm endpoint result
      logger(['info', 'testing', 'test'], 'Test porg auth plugin with static-bearer end')
      t.end()
    }
  })

  test.test('Test porg auth plugin with static-bearer wrong token', async function (t) {
    logger(['info', 'testing', 'test'], `Test porg auth plugin with static-bearer wrong token`)
    const options = {
      method: 'GET',
      url: '/api/emulate/auth/static-bearer',
      headers: {
        authorization: 'Bearer batataPass' + '1'
      }
    }
    let response
    let expected = { key: 'not-authenticated', ctx: {} }
    try {
      response = await server.inject(options)
      t.deepEqual(response && response.result, expected) // Confirm endpoint result
    } catch (err) {
      logger(['crit', 'testing', 'test'], err.message)
    } finally {
      t.deepEqual(response.result, expected) // Confirm endpoint result
      logger(['info', 'testing', 'test'], 'Test porg auth plugin with static-bearer wrong token end')
      t.end()
    }
  })
})
