import test from 'tape-promise/tape'
import { config, logger, setConfig, porg, TestUtils } from '@/'

test('setup simple', function (t) {
  t.test('Route without porg-auth', async function (t) {
    setConfig({basePath: TestUtils.path('#/env/simple'), redefine: true})
    logger(['info', 'testing', 'test'], `Setup testing`)
    await TestUtils.cleanDbs({config})

    const server = await porg({
      runOnce: () => {
      }
    })
    const hapiServer = server.getHapiServer()
    hapiServer.route({
      path: '/api/emulate/auth/no-plugin',
      method: 'GET',
      handler: async (request, h) => {
        throw new Error('Random error')
      },
      config: {

      }
    })

    try {
      await server.start()
    } catch (err) {
      t.equal(err.message, 'Error processing porg-auth in path /api/emulate/auth/no-plugin method get problem porg-auth => any.required')
      await hapiServer.stop()
      await TestUtils.closeDbs({config})
    } finally {
      t.end()
    }
  })

  t.test('Route with user session not defined in porg.yml', async function (t) {
    setConfig({basePath: `${__dirname}/../../../env/simple`, redefine: true})
    logger(['info', 'testing', 'test'], `Setup testing`)
    await TestUtils.cleanDbs({config})

    const server = await porg({
      runOnce: () => {
      }
    })
    const hapiServer = server.getHapiServer()
    hapiServer.route({
      path: '/api/emulate/auth/porg-config-no-user-session',
      method: 'GET',
      handler: async (request, h) => {
        throw new Error('Random error')
      },
      config: {
        plugins: {
          'porg-auth': {
            type: 'user-session',
            roles: ['user']
          }
        }
      }
    })

    try {
      await server.start()
    } catch (err) {
      t.equal(err.message, 'Error processing porg-auth in path /api/emulate/auth/porg-config-no-user-session method get \'user-session\' was not defined in porg.yml')
      await hapiServer.stop()
      await TestUtils.closeDbs({config})
    } finally {
      t.end()
    }
  })

  t.test('Route with static-bearer not defined in porg.yml', async function (t) {
    setConfig({basePath: `${__dirname}/../../../env/simple`, redefine: true})
    logger(['info', 'testing', 'test'], `Setup testing`)
    await TestUtils.cleanDbs({config})

    const server = await porg({
      runOnce: () => {
      }
    })
    const hapiServer = server.getHapiServer()
    hapiServer.route({
      path: '/api/emulate/auth/porg-config-no-static-bearer',
      method: 'GET',
      handler: async (request, h) => {
        throw new Error('Random error')
      },
      config: {
        plugins: {
          'porg-auth': {
            type: 'static-bearer',
            key: 'test'
          }
        }
      }
    })

    try {
      await server.start()
    } catch (err) {
      t.equal(err.message, 'Error processing porg-auth in path /api/emulate/auth/porg-config-no-static-bearer method get \'static-bearer\' was not defined in porg.yml')
      await hapiServer.stop()
      await TestUtils.closeDbs({config})
    } finally {
      t.end()
    }
  })

  t.test('Route with static-bearer with key not defined in porg.yml', async function (t) {
    setConfig({basePath: `${__dirname}/../../../env/static-bearer`, redefine: true})
    logger(['info', 'testing', 'test'], `Setup testing`)
    await TestUtils.cleanDbs({config})

    const server = await porg({
      runOnce: () => {
      }
    })
    const hapiServer = server.getHapiServer()
    hapiServer.route({
      path: '/api/emulate/auth/porg-config-with-key-no-static-bearer',
      method: 'GET',
      handler: async (request, h) => {
        throw new Error('Random error')
      },
      config: {
        plugins: {
          'porg-auth': {
            type: 'static-bearer',
            key: 'test'
          }
        }
      }
    })

    try {
      await server.start()
    } catch (err) {
      t.equal(err.message, 'Error processing porg-auth in path /api/emulate/auth/porg-config-with-key-no-static-bearer method get \'static-bearer\' key test was not defined in porg.yml')
      await hapiServer.stop()
      await TestUtils.closeDbs({config})
    } finally {
      t.end()
    }
  })

  t.test('Route with static-bearer with option not valid in porg.yml', async function (t) {
    setConfig({basePath: `${__dirname}/../../../env/static-bearer`, redefine: true})
    logger(['info', 'testing', 'test'], `Setup testing`)
    await TestUtils.cleanDbs({config})

    const server = await porg({
      runOnce: () => {
      }
    })
    const hapiServer = server.getHapiServer()
    hapiServer.route({
      path: '/api/emulate/auth/porg-config-with-invalid-option',
      method: 'GET',
      handler: async (request, h) => {
        throw new Error('Random error')
      },
      config: {
        plugins: {
          'porg-auth': {
            type: 'static-bearer',
            key: 'babata',
            invalid: 'option'
          }
        }
      }
    })

    try {
      await server.start()
    } catch (err) {
      t.equal(err.message, 'Error processing porg-auth in path /api/emulate/auth/porg-config-with-invalid-option method get problem porg-auth => object.allowUnknown porg-auth => array.base')
      await hapiServer.stop()
      await TestUtils.closeDbs({config})
    } finally {
      t.end()
    }
  })

  t.test('Route with two factor not defined in porg.yml', async function (t) {
    setConfig({basePath: `${__dirname}/../../../env/user-session`, redefine: true})
    logger(['info', 'testing', 'test'], `Setup testing`)
    await TestUtils.cleanDbs({config})

    const server = await porg({
      runOnce: () => {
      }
    })
    const hapiServer = server.getHapiServer()
    hapiServer.route({
      path: '/api/emulate/auth/porg-config-no-two-factor',
      method: 'GET',
      handler: async (request, h) => {
        throw new Error('Random error')
      },
      config: {
        plugins: {
          'porg-auth': {
            type: 'user-session',
            roles: ['user'],
            twoFactor: true
          }
        }
      }
    })

    try {
      await server.start()
    } catch (err) {
      t.equal(err.message, 'Error processing porg-auth in path /api/emulate/auth/porg-config-no-two-factor method get \'twoFactor\' was not defined in porg.yml')
      await hapiServer.stop()
      await TestUtils.closeDbs({config})
    } finally {
      t.end()
    }
  })
})
