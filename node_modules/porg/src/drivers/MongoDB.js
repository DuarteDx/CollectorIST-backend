import { MongoClient, ObjectID } from 'mongodb'

let dbInstance
let config = null
const configDriver = ({ options }) => {
  config = options
}
let clientMongo

const mongoConnect = (address, cb) => {
  if (!dbInstance) {
    const hosts = config.servers.map(({ host, port }) => {
      return `${host}:${port}`
    }).join(',')
    let authPrefix = ''
    if (config['username'] && config['password']) {
      authPrefix = `${config['username']}:${config['password']}@`
    }
    let url = `mongodb://${authPrefix}${hosts}/${config.collection}?authMechanism=SCRAM-SHA-1`
    if (config['replicaSet']) {
      url += `&replicaSet=${config['replicaSet']}`
    }

    MongoClient.connect(url,
      {
        useNewUrlParser: true,
        reconnectInterval: 1000,
        reconnectTries: Number.MAX_SAFE_INTEGER
      }, (err, client) => {
        if (!err) {
          dbInstance = client.db(config.collection)
          clientMongo = client
        }
        return cb(err, dbInstance)
      }
    )
  } else {
    return cb(null, dbInstance)
  }
}

const getDB = () => {
  return new Promise((resolve, reject) => {
    if (!config) {
      return reject(new Error('Mongo driver needs to be initialize'))
    }
    mongoConnect(config.mongoUrl, (err) => {
      if (err) {
        return reject(err)
      } else {
        return resolve(dbInstance)
      }
    })
  })
}

const getClient = () => {
  return new Promise((resolve, reject) => {
    if (!config) {
      return reject(new Error('Mongo driver needs to be initialized'))
    }
    return resolve(clientMongo)
  })
}

const cleanDatabase = async () => {
  if (dbInstance.serverConfig.isConnected()) {
    const db = await getDB()
    await db.dropDatabase()
  }
}

const shutdown = async () => {
  if (dbInstance.serverConfig.isConnected()) {
    await clientMongo.close(true)
    dbInstance = null
  }
}

export { configDriver, getDB, getClient, shutdown, ObjectID, cleanDatabase }
