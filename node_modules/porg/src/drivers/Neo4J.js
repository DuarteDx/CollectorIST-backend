import { v1 as neo4j } from 'neo4j-driver'
import { logger } from 'papagaio'

let driver = null
let config = null
const configDriver = ({ options }) => {
  config = options
  driver = neo4j.driver(config.neo4j.host, neo4j.auth.basic(config.neo4j.user, config.neo4j.pass))
}

const read = (query, params) => {
  return new Promise((resolve, reject) => {
    const session = driver.session()
    session.readTransaction((transaction) => {
      transaction.run(query, params)
        .then((result) => {
          session.close()
          return resolve(result.records)
        }).catch((err) => {
          session.close()
          return reject(err)
        })
    })
  })
}

const write = (query, params) => {
  return new Promise((resolve, reject) => {
    const session = driver.session()
    session.writeTransaction((transaction) => {
      transaction.run(query, params)
        .then((result) => {
          session.close()
          return resolve(result.records)
        }).catch((err) => {
          session.close()
          return reject(err)
        })
    })
  })
}

const cleanDatabase = async () => {
  throw new Error('Clean database not defined')
}

const shutdown = async () => {
  logger(['info', 'database', 'neo4j'], 'Terminating Neo4J database driver')
}

const int = neo4j.int

export {
  configDriver,
  read,
  write,
  int,
  shutdown,
  cleanDatabase
}
