import { logger } from 'papagaio'
import { Smtp } from '@/drivers'
import Joi from 'joi'
import { getEmailProvider } from '@/providers'
import moment from 'moment'
import nunjucks from 'nunjucks'
import { config } from '@'

const commonSchema = Joi.object().keys({
  from: Joi.string().required(),
  to: Joi.string().required(),
  deliveryTime: Joi.date(),
  expireTime: Joi.date()
})

const emailSchema = commonSchema.keys({
  subject: Joi.string().required(),
  text: Joi.string(),
  html: Joi.string()
}).or('text', 'html')

const emailTemplateSchema = commonSchema.keys({
  template: Joi.string().required(),
  context: Joi.object().required(),
  locale: Joi.string().required()
})

let templateMapGlobal, templatePathGlobal

const validateTime = (mailOptions) => {
  const now = moment()
  if (!mailOptions.deliveryTime) {
    mailOptions.deliveryTime = now.toDate()
  }
  if (!mailOptions.expireTime) {
    mailOptions.expireTime = now.add(1, 'hours').toDate()
  }

  if (moment(mailOptions.expireTime).isBefore(moment(mailOptions.deliveryTime))) {
    throw new Error('Invalid error time')
  }
}

const sendSmtp = (mailOptions) => {
  return new Promise((resolve, reject) => {
    for (let key in mailOptions) { // Clean keys with null elements
      if (!mailOptions[key]) {
        delete mailOptions[key]
      }
    }
    const validation = Joi.validate(mailOptions, emailSchema)
    if (validation.error) {
      logger(['porg', 'mail', 'notice'], `Invalid format sending email`)
      return reject(new Error(validation.error))
    }
    validateTime(validation.value)
    Smtp.transporter.sendMail(validation.value, (error, info) => {
      if (error) {
        logger(['porg', 'mail', 'notice'], `Error sending email`)
        return reject(error)
      }
      logger(['porg', 'mail', 'info'], JSON.stringify(info))
      return resolve(info.messageId)
    })
  })
}

let sendByDrive

const sendPersistance = (persistanceProvider) => {
  return async (mailOptions) => {
    const validation = Joi.validate(mailOptions, emailSchema)
    if (validation.error) {
      logger(['porg', 'mail', 'notice'], `Invalid format sending email`)
      throw new Error(validation.error)
    }
    validateTime(validation.value)
    await persistanceProvider.insertEmail(validation.value)
  }
}

const renderTemplate = ({ template, context, locale }) => {
  const result = {
    subject: null,
    text: null,
    html: null
  }
  logger(['info', 'email-service', 'porg'], `Configuring email templates path to ${templatePathGlobal}`)
  const env = nunjucks.configure(templatePathGlobal, {

    autoescape: true, throwOnUndefined: true
  })
  let localAppUrl = `${config.application.protocol}://${config.application.host}`
  if ((config.application.protocol.toLowerCase() === 'https' && config.application.frontendPort !== 443) ||
        (config.application.protocol.toLowerCase() === 'http' && config.application.frontendPort !== 80)) {
    localAppUrl = `${localAppUrl}:${config.application.frontendPort}`
  }
  env.addGlobal('app', {
    baseURL: localAppUrl
  })
  try {
    const subjectKey = `${template}_subject_${locale}`
    const subjectTemplate = templateMapGlobal[subjectKey]
    if (!subjectTemplate) {
      throw new Error(`No template for subject found ${subjectKey}`)
    }
    result.subject = env.renderString(subjectTemplate, context)
    const textBodyKey = `${template}_body_text_${locale}`
    const textBodyTemplate = templateMapGlobal[textBodyKey]
    if (!textBodyKey) {
      throw new Error(`No template for body found ${subjectKey}`)
    }
    result.text = env.renderString(textBodyTemplate, context)
    const htmlBodyKey = `${template}_body_html_${locale}`
    const htmlBodyTemplate = templateMapGlobal[htmlBodyKey]
    if (htmlBodyTemplate) {
      result.html = env.renderString(htmlBodyTemplate, context)
    }
    return result
  } catch (err) {
    console.log({err})
    throw err
  }
}

let Email = {
  send () {
    throw new Error('Mail not configured')
  },
  async sendWithTemplate (mailOptions) {
    const validation = Joi.validate(mailOptions, emailTemplateSchema)
    if (validation.error) {
      logger(['porg', 'mail', 'notice'], `Invalid format sending email`)
      throw new Error(validation.error)
    }
    const email = {
      from: mailOptions.from,
      to: mailOptions.to,
      ...renderTemplate({template: validation.value.template, context: validation.value.context, locale: validation.value.locale})
    }
    if (mailOptions.deliveryTime) {
      email.deliveryTime = mailOptions.deliveryTime
    }
    if (mailOptions.expireTime) {
      email.expireTime = mailOptions.expireTime
    }
    this.send(email)
  }
}
const setConfigEmail = ({emailConfig, templateMap, templatePath}) => {
  templateMapGlobal = templateMap
  templatePathGlobal = templatePath
  if (emailConfig.throttling) {
    Email.send = sendPersistance(getEmailProvider({name: emailConfig.throttling.persistenceProvider}))
    sendByDrive = sendSmtp
  } else {
    if (emailConfig.driver === 'smtp') {
      Email.send = sendSmtp
    }
  }
}

export {
  setConfigEmail,
  Email,
  sendByDrive
}
