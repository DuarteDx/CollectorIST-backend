import u2f from 'u2f'
import UserSessionManager from '@/plugins/auth/services/UserSessionManager'
import { errorWithKey } from '@/plugins/errors'

const handler = (config) => {
  return async (request, h) => {
    try {
      const credentials = request.getPrincipal()
      let userU2F = await config.twoFactor.u2f.getUserU2F({ username: credentials.username })
      if (userU2F) {
        let checkRes = u2f.checkSignature(userU2F.authRequest, request.payload, userU2F.publicKey)
        if (checkRes.successful) {
          await UserSessionManager.setup({ principal: request.getPrincipal(), config, h })
          return {} // returning h.state was breaking the endpoint
        } else {
          throw errorWithKey('not-authorized', {
            ctx: {}
          })
        }
      } else {
        throw errorWithKey('requires-two-factor-registration', {
          ctx: {}
        })
      }
    } catch (err) {
      throw err
    }
  }
}

const config = {
  description: 'Submits a U2F Sign Challenge',
  plugins: {
    'porg-auth': {
      type: 'user-session',
      roles: []
    }
  }
}

export default { handler, config }
