import u2f from 'u2f'
import UserHasAnyTwoFactorAuth from '@/plugins/auth/services/UserHasAnyTwoFactorAuth'
import { errorWithKey } from '@/plugins/errors'

const handler = (config) => {
  return async (request, h) => {
    const username = request.getPrincipal().username
    const userAlreadyHasTwoFactor = await UserHasAnyTwoFactorAuth({
      username,
      getUserU2F: config.twoFactor.u2f.getUserU2F,
      getUserTOTP: config.twoFactor.totp.getUserTOTP
    })

    if (userAlreadyHasTwoFactor && !request.auth.credentials.twoFactor) {
      throw errorWithKey('requires-two-factor-challenge', {
        ctx: {}
      })
    }
    let authRequest = u2f.request(config.twoFactor.u2f.appId)
    await config.twoFactor.u2f.upsertUserU2F({ username, u2f: { authRequest } })
    return authRequest
  }
}

const config = {
  description: 'Get registration challenge for U2F',
  plugins: {
    'porg-auth': {
      type: 'user-session',
      roles: []
    }
  }
}

export default { handler, config }
