import u2f from 'u2f'
import UserHasAnyTwoFactorAuth from '@/plugins/auth/services/UserHasAnyTwoFactorAuth'
import { errorWithKey } from '@/plugins/errors'

const handler = (config) => {
  return async (request, h) => {
    try {
      const username = request.getPrincipal().username
      const userAlreadyHasTwoAuth = await UserHasAnyTwoFactorAuth({ username, getUserU2F: config.twoFactor.u2f.getUserU2F, getUserTOTP: config.twoFactor.totp.getUserTOTP })
      if (userAlreadyHasTwoAuth) {
        let userU2F = await config.twoFactor.u2f.getUserU2F({ username })
        let authRequest = u2f.request(config.twoFactor.u2f.appId, userU2F.keyHandle)
        await config.twoFactor.u2f.upsertUserU2F({ username, u2f: {authRequest} })
        return authRequest
      } else {
        throw errorWithKey('requires-two-factor-registration', {
          ctx: {}
        })
      }
    } catch (err) {
      throw errorWithKey('internal-error', {
        ctx: {}
      })
    }
  }
}

const config = {
  description: 'Get sign challenge for U2F',
  plugins: {
    'porg-auth': {
      type: 'user-session',
      roles: []
    }
  }
}

export default { handler, config }
