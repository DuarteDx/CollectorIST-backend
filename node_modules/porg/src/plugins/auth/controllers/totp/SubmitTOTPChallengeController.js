import Joi from 'joi'
import otplib from 'otplib'
import { getJwt } from '@/plugins/auth/services/JwtUtils'
import { errorWithKey } from '@/plugins/errors'

const handler = (config) => {
  return async (request, h) => {
    const totp = await config.twoFactor.totp.getUserTOTP({ username: request.getPrincipal().username })
    const isValid = otplib.authenticator.verify({ secret: totp.secret, token: request.payload.code })
    if (isValid) {
      const token = await getJwt({
        payload: { ...request.getPrincipal(), twoFactor: true },
        secretOrPrivateKey: config.jwt.secret,
        options: { expiresIn: config.jwt.expires || '1 hour' }
      })
      h.state('P_SESSION', token, {encoding: 'none', ttl: config.sessionTime * 1000, isSameSite: 'Strict', path: '/'})
      h.state('P_INFO', Buffer.from(JSON.stringify({ twoFactor: false, roles: request.getPrincipal().roles })).toString('base64'), {encoding: 'none', ttl: config.sessionTime * 1000, isSameSite: 'Strict', path: '/', isHttpOnly: false})
      return {} // returning h.state was breaking the endpoint
    } else {
      throw errorWithKey('not-authorized', {
        ctx: {}
      })
    }
  }
}

const config = {
  description: 'Submits a TOTP challenge code to verify',
  validate: {
    payload: {
      code: Joi.number().integer().required()
    }
  },
  plugins: {
    'porg-auth': {
      type: 'user-session',
      roles: []
    }
  }
}

export default { handler, config }
