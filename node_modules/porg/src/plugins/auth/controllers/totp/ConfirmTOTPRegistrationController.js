import Joi from 'joi'
import otplib from 'otplib'
import UserSessionManager from '@/plugins/auth/services/UserSessionManager'
import { errorWithKey } from '@/plugins/errors'

const handler = (config) => {
  return async (request, h) => {
    const totp = await config.twoFactor.totp.getUserTOTP({ username: request.getPrincipal().username })
    const isValid = otplib.authenticator.verify({ secret: totp.secret, token: request.payload.code })
    if (isValid) {
      await config.twoFactor.totp.confirmUserTOTP({ username: request.getPrincipal().username })
      await UserSessionManager.setup({ principal: request.getPrincipal(), config, h })
      return {} // returning h.state was breaking the endpoint
    } else {
      throw errorWithKey('not-authorized', {
        cause: 'Invalid code',
        ctx: {}
      })
    }
  }
}

const config = {
  description: 'Confirms a TOTP registration with a given code to verify it',
  validate: {
    payload: {
      code: Joi.number().integer().required()
    }
  },
  plugins: {
    'porg-auth': {
      type: 'user-session',
      roles: []
    }
  }
}

export default { handler, config }
