import otplib from 'otplib'
import qrcode from 'qrcode'
import UserHasAnyTwoFactorAuth from '@/plugins/auth/services/UserHasAnyTwoFactorAuth'
import { errorWithKey } from '@/plugins/errors'

const qrCodeToDataURL = ({otpauth}) => {
  return new Promise(function (resolve, reject) {
    qrcode.toDataURL(otpauth, (err, imageUrl) => {
      if (err) {
        return reject(err)
      }
      return resolve({ qrcode: imageUrl })
    })
  })
}

const handler = (config) => {
  return async (request, h) => {
    const username = request.getPrincipal().username
    const userAlreadyHasTwoFactor = await UserHasAnyTwoFactorAuth({ username, getUserU2F: config.twoFactor.u2f.getUserU2F, getUserTOTP: config.twoFactor.totp.getUserTOTP })
    if (userAlreadyHasTwoFactor && !request.auth.credentials.twoFactor) {
      throw errorWithKey('requires-totp-challenge', {
        ctx: {}
      })
    }
    const secret = otplib.authenticator.generateSecret()
    const otpauth = otplib.authenticator.keyuri(request.getPrincipal().username, config.twoFactor.totp.service, secret)
    config.twoFactor.totp.upsertUserTOTP({ username: request.getPrincipal().username, secret })
    try {
      return qrCodeToDataURL({otpauth})
    } catch (err) {
      throw errorWithKey('internal-error', {
        ctx: {}
      })
    }
  }
}

const config = {
  description: 'Register a TOTP Secret for the logged user',
  plugins: {
    'porg-auth': {
      type: 'user-session',
      roles: []
    }
  }
}

export default { handler, config }
