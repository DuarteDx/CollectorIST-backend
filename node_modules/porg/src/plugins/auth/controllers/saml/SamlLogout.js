import Joi from 'joi'
import jwt from 'jsonwebtoken'

const handler = ({ samlOptions }) => {
  return async (request, h) => {
    return new Promise((resolve, reject) => {
      if (request.query.SAMLResponse) {
        samlOptions.sp.create_logout_response_url(samlOptions.idp, { in_response_to: request.query.SAMLResponse, relay_state: samlOptions.logoutRedirect }, async (err, response) => {
          if (err) {
            return reject(err)
          }
          return resolve(h.redirect(response))
        })
      } else {
        const session = jwt.decode(request.state['P_SESSION'])
        h.unstate('P_SESSION', {encoding: 'none', isSameSite: 'Strict', path: '/'})
        h.unstate('P_IS_LOGGED', {encoding: 'none', isSameSite: 'Strict', path: '/', isHttpOnly: false})
        samlOptions.sp.create_logout_request_url(samlOptions.idp, {
          relay_state: samlOptions.logoutRedirect,
          name_id: session.nId,
          session_index: session.sIndex
        }, (err, logoutUrl) => {
          if (err) {
            return reject(err)
          }
          return resolve(h.redirect(logoutUrl))
        })
      }
    })
  }
}

const config = {
  description: 'SAML Logout',
  validate: {
    query: {
      SAMLResponse: Joi.string().optional(),
      RelayState: Joi.string().optional()
    }
  },
  plugins: {
    'porg-auth': {
      type: 'no-auth'
    }
  }
}

export default { handler, config }
