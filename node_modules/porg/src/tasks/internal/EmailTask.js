import Task from '@/tasks/Task'
import { config } from '@/'
import { getEmailProvider } from '@/providers'
import moment from 'moment'
import { sendByDrive } from '@/emails/Email'
// execution: cron, none
export const execution = 'cron'

// Run every minute
export const cron = '0 * * * * *'

const sleep = (miliseconds) => {
  return new Promise((resolve, reject) => {
    setTimeout(resolve, miliseconds)
  })
}

export default class EmailTask extends Task {
  async run (args) {
    if (config.email && config.email.throttling) {
      this.println('Start sending emails')
      await this.flushPrint()
      const emailProvider = getEmailProvider({name: config.email.throttling.persistenceProvider})
      let emails = await emailProvider.getNextEmails()
      const now = moment()
      for (const email of emails) {
        const delivery = moment(email.deliveryTime)
        const expire = moment(email.expireTime)
        if (delivery.isBefore(now)) {
          if (expire.isAfter(now)) {
            const emailConfig = {...email}
            delete emailConfig._id
            delete emailConfig.emailState
            await sendByDrive(emailConfig)
            await emailProvider.updateEmailState({id: email._id, state: 'sended'})
            await sleep(config.email.throttling.interval)

            this.println('Sending email with id ' + email._id)
            await this.flushPrint()
          } else {
            await emailProvider.updateEmailState({id: email._id, state: 'timeout'})
            this.println('Aborting email with id ' + email._id + ', because of timeout')
            await this.flushPrint()
          }
        }
      }
    }
  }
}
