import { porgFork } from '@/'
import os from 'os'
import moment from 'moment'
import StatusTask from '@/tasks/StatusTask'
const processInit = async ({ instanceId, porgYmlPath, taskPath, taskInfo, input, sessionId }) => {
  const pid = process.pid
  const platform = process.platform
  const hostname = os.hostname()
  const status = StatusTask.Running
  const startDate = moment().valueOf()
  process.send({type: 'update', params: {id: instanceId, pid, platform, hostname, status, startDate}})
  await porgFork({ porgYmlPath })
  let TaskClass
  if (taskPath) {
    const loadedTask = require(taskPath)
    TaskClass = loadedTask.default
  } else { // If task with src in db

  }
  const task = new TaskClass({name: taskInfo.id})
  await task.execute({id: instanceId, input, sessionId})
}

process.on('message', async (m) => {
  switch (m.type) {
    case 'init': await processInit(m)
      break
    default: throw new Error('invalid type')
  }
})

process.on('SIGTERM', async () => {
  process.send({type: 'abort', err: 'Killed by SIGTERM'})
})
