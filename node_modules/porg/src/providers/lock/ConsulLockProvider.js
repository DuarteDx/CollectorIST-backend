import { consulClient } from '@/drivers/Consul'

const sessionCreate = () => {
  return new Promise((resolve, reject) => {
    consulClient.session.create({
      lockdelay: '1s',
      ttl: '10s'
    }, (err, result) => {
      if (err) {
        return reject(err)
      }
      return resolve(result.ID)
    })
  })
}

const sessionRenew = ({SessionId}) => {
  return new Promise((resolve, reject) => {
    consulClient.session.renew(SessionId, (err, renew) => {
      if (err) {
        return reject(err)
      }
      return resolve(renew)
    })
  })
}

const sessionDestroy = ({SessionId}) => {
  return new Promise((resolve, reject) => {
    consulClient.session.destroy(SessionId, (err) => {
      if (err) {
        return reject(err)
      }
      return resolve()
    })
  })
}

class Session {
  constructor ({sessionId, rootPath}) {
    this.sessionId = sessionId
    this.rootPath = rootPath
  }

  async renewSession () {
    return sessionRenew({SessionId: this.sessionId})
  }

  async destroySession () {
    return sessionDestroy({SessionId: this.sessionId})
  }

  getSessionId () {
    return this.sessionId
  }

  hasLock ({ lockId }) {
    return new Promise((resolve, reject) => {
      consulClient.kv.get({
        key: `${this.rootPath}/${lockId}`
      }, (err, result) => {
        if (err) {
          return reject(err)
        }
        if (result && result.Session === this.sessionId) {
          return resolve(true)
        } else {
          return resolve(false)
        }
      })
    })
  }

  attemptLock ({ lockId }) {
    return new Promise((resolve, reject) => {
      consulClient.kv.set({
        key: `${this.rootPath}/${lockId}`,
        value: this.sessionId,
        acquire: this.sessionId
      }, (err, result) => {
        if (err) {
          return reject(err)
        } else {
          return resolve(result)
        }
      })
    })
  }
  releaseLock ({ lockId }) {
    return new Promise((resolve, reject) => {
      consulClient.kv.set({
        key: `${this.rootPath}/${lockId}`,
        value: this.sessionId,
        release: this.sessionId
      }, (err, result) => {
        if (err) {
          return reject(err)
        } else {
          return resolve(true)
        }
      })
    })
  }
}

export default class ConsulLockProvider {
  constructor ({ rootPath }) {
    this.rootPath = rootPath
    this.sessionId = null
  }

  async createSession () {
    const id = await sessionCreate()
    return new Session({sessionId: id, rootPath: this.rootPath})
  }

  async getSession ({id}) {
    return new Session({sessionId: id, rootPath: this.rootPath})
  }
}
