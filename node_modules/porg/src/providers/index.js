import MongoUserAuthProvider from '@/providers/auth/MongoUserAuthProvider'
import RawUserAuthProvider from '@/providers/auth/RawUserAuthProvider'
import ConsulLockProvider from '@/providers/lock/ConsulLockProvider'
import MongoMigrationPersistenceProvider from '@/providers/persistence/MongoMigrationPersistenceProvider'
import MongoTaskPersistenceProvider from '@/providers/persistence/MongoTaskPersistenceProvider'
import MongoEmailProvider from '@/providers/email/MongoEmailProvider'
import MongoFileHandlerUploadPersistenceProvider from '@/providers/persistence/MongoFileHandlerUploadPersistenceProvider'
import FenixEduDriveStorageProvider from '@/providers/storage/FenixEduDriveStorageProvider'
import S3StorageProvider from '@/providers/storage/S3StorageProvider'
import FileSystemStorageProvider from '@/providers/storage/FileSystemStorageProvider'
import { config } from '@/'

export const getUserAuthProvider = ({name}) => {
  switch (name) {
    case 'raw': return new RawUserAuthProvider()
    case 'mongo': return new MongoUserAuthProvider()
    default: throw new Error('Invalid user auth provider')
  }
}

export const getLockProvider = ({name}) => {
  switch (name) {
    case 'consul': return new ConsulLockProvider({ rootPath: config.lockProvider.options.keyValueStorePath })
    default: throw new Error('Invalid lock provider')
  }
}

export const getPersistenceMigrationProvider = ({name}) => {
  switch (name) {
    case 'mongo': return new MongoMigrationPersistenceProvider()
    default: throw new Error('Invalid persistence migration provider')
  }
}

export const getPersistenceTaskProvider = ({name}) => {
  switch (name) {
    case 'mongo': return new MongoTaskPersistenceProvider()
    default: throw new Error('Invalid persistence task provider')
  }
}

export const getEmailProvider = ({name}) => {
  switch (name) {
    case 'mongo': return new MongoEmailProvider()
    default: throw new Error('Invalid persistence email provider')
  }
}

export const getFileHandlerUploadPersistenceProvider = ({ name }) => {
  switch (name) {
    case 'mongo': return new MongoFileHandlerUploadPersistenceProvider()
    default: throw new Error('Invalid persistence provider for File Handler Upload')
  }
}

export const getStorageProvider = ({ name, rootPath }) => {
  switch (name) {
    case 'fenixedu-drive': return new FenixEduDriveStorageProvider({ rootPath })
    case 's3': return new S3StorageProvider({ rootPath })
    case 'file-system': return new FileSystemStorageProvider({ rootPath })
    default: throw new Error('Invalid storage provider')
  }
}
