import { getDB } from '@/drivers/MongoDB'
import StatusTask from '@/tasks/StatusTask'

export default class MongoTaskPersistenceProvider {
  async addTask ({taskName, execution, cron, version, executionTimeLimit, defaultInput}) {
    const db = await getDB()
    const taskDb = await db.collection('porg-tasks').findOne({_id: taskName})
    if (taskDb) {
      if (taskDb.version === version) {
        return false
      } else {
        await db.collection('porg-tasks').findOneAndUpdate({ _id: taskName }, { $set: {type: 'src', execution, cron, version, executionTimeLimit, defaultInput} }, { upsert: true })
        return true
      }
    } else {
      await db.collection('porg-tasks').insertOne({_id: taskName, type: 'src', execution, cron, version, executionTimeLimit, defaultInput})
      return true
    }
  }

  async addTaskSource ({taskName, execution, cron, version, executionTimeLimit, defaultInput, src}) {
    const db = await getDB()
    const taskDb = await db.collection('porg-tasks').findOne({_id: taskName})
    if (taskDb) {
      if (taskDb.version === version) {
        return false
      } else {
        await db.collection('porg-tasks').findOneAndUpdate({ _id: taskName }, { $set: { type: 'database', execution, cron, version, executionTimeLimit, src, defaultInput } }, { upsert: true })
        return true
      }
    } else {
      await db.collection('porg-tasks').insertOne({_id: taskName, type: 'database', execution, cron, version, executionTimeLimit, src, defaultInput})
      return true
    }
  }

  async getTasks () {
    const db = await getDB()
    const tasks = await db.collection('porg-tasks').find().toArray()
    return tasks.map((t) => {
      return {
        id: t._id,
        type: t.type,
        execution: t.execution,
        cron: t.cron,
        version: t.version,
        executionTimeLimit: t.executionTimeLimit,
        src: t.src,
        defaultInput: t.defaultInput
      }
    })
  }

  async getTask ({taskName}) {
    const db = await getDB()
    const task = await db.collection('porg-tasks').findOne({_id: taskName})
    return {
      id: task._id,
      type: task.type,
      execution: task.execution,
      cron: task.cron,
      version: task.version,
      src: task.src,
      executionTimeLimit: task.executionTimeLimit,
      defaultInput: task.defaultInput
    }
  }

  async createTaskInstance ({id, name, date, executionTimeLimit, input}) {
    const db = await getDB()
    await db.collection('porg-tasks-instances').insertOne({'_id': id, name, date, status: StatusTask.Pending, executionTimeLimit, input, percentage: 0, text: '', killswitch: false})
  }

  async updateTaskInstance ({id, status, message, startDate, endDate, percentage, text, pid, platform, hostname, killswitch, executionTimeLimit, locks}) {
    const db = await getDB()
    const update = {}
    if (status) {
      update['status'] = status
    }
    if (message) {
      update['message'] = message
    }
    if (startDate) {
      update['startDate'] = startDate
    }
    if (endDate) {
      update['endDate'] = endDate
    }
    if (percentage !== undefined) { // with undefined because 0 is false
      update['percentage'] = percentage
    }
    if (text !== undefined) { // with undefined because '' is false
      update['text'] = text
    }
    if (pid !== undefined) { // with undefined because '' is false
      update['pid'] = pid
    }
    if (platform !== undefined) { // with undefined because '' is false
      update['platform'] = platform
    }
    if (hostname !== undefined) { // with undefined because '' is false
      update['hostname'] = hostname
    }
    if (killswitch !== undefined) { // with undefined because '' is false
      update['killswitch'] = killswitch
    }
    if (executionTimeLimit !== undefined) { // with undefined because '' is false
      update['executionTimeLimit'] = executionTimeLimit
    }
    if (locks !== undefined) { // with undefined because '' is false
      update['locks'] = locks
    }
    await db.collection('porg-tasks-instances').findOneAndUpdate({ _id: id }, {'$set': update})
  }

  async getTasksInstances ({status}) {
    const db = await getDB()
    const tasks = await db.collection('porg-tasks-instances').find({status}).toArray()
    return tasks.map((t) => {
      return {
        id: t._id,
        name: t.name,
        date: t.date,
        status: t.status,
        executionTimeLimit: t.executionTimeLimit,
        startDate: t.startDate,
        endDate: t.endDate,
        message: t.message,
        input: t.input,
        text: t.text,
        percentage: t.percentage,
        pid: t.pid,
        platform: t.platform,
        hostname: t.hostname,
        killswitch: t.killswitch,
        locks: t.locks
      }
    })
  }

  async getTaskInstanceById ({id}) {
    const db = await getDB()
    const t = await db.collection('porg-tasks-instances').findOne({_id: id})
    if (t) {
      return {
        id: t._id,
        name: t.name,
        date: t.date,
        status: t.status,
        executionTimeLimit: t.executionTimeLimit,
        startDate: t.startDate,
        endDate: t.endDate,
        message: t.message,
        input: t.input,
        text: t.text,
        percentage: t.percentage,
        pid: t.pid,
        platform: t.platform,
        hostname: t.hostname,
        killswitch: t.killswitch,
        locks: t.locks
      }
    } else {
      return null
    }
  }

  async getTaskInstances ({name, status}) {
    const db = await getDB()
    const tasks = await db.collection('porg-tasks-instances').find({name, status}).sort({date: 1}).toArray()
    return tasks.map((t) => {
      return {
        id: t._id,
        name: t.name,
        date: t.date,
        status: t.status,
        input: t.input,
        percentage: t.percentage
      }
    })
  }
}
