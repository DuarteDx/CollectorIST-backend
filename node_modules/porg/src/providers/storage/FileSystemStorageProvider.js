import * as fs from 'fs'
import * as path from 'path'
import mkdirp from 'mkdirp'

export default class FileSystemStorageProvider {
  constructor ({ rootPath }) {
    this.rootPath = rootPath
  }

  storeFile ({ file, filePath }) {
    const fullFilePath = path.join(this.rootPath, filePath)
    const fileDirname = path.dirname(fullFilePath)
    mkdirp.sync(fileDirname)
    return new Promise((resolve, reject) => {
      const filePersistence = fs.createWriteStream(fullFilePath)
      filePersistence.on('error', (err) => { return reject(err) })
      file.pipe(filePersistence)
      file
        .on('end', () => {
          return resolve(true)
        })
        .on('error', (error) => {
          this.deleteFile({ filePath })
          return reject(error)
        })
    })
  }

  async downloadFile ({ filePath }) {
    const fullFilePath = path.join(this.rootPath, filePath)
    return fs.createReadStream(fullFilePath)
  }

  async deleteFile ({ filePath }) {
    const fullFilePath = path.join(this.rootPath, filePath)
    if (fs.existsSync(fullFilePath)) {
      fs.unlinkSync(fullFilePath)
    }
  }

  async listFiles ({ searchPath }) {
    const fullPath = path.join(this.rootPath, searchPath)
    return fs.readdirSync(path.dirname(fullPath))
  }
}
