import { getDB } from '@/drivers/MongoDB'

export default class MongoUserAuthProvider {
  async getU2FForUsername ({username}) {
    let db = await getDB()
    const user = await db.collection('users').findOne({'_id': username})
    return user.auth ? user.auth.u2f : undefined
  }

  async createOrUpdateAuthorU2FAuth ({username, u2f}) {
    let db = await getDB()
    await db.collection('users').updateOne({'_id': username}, {'$set': {'auth.u2f.publicKey': u2f.publicKey, 'auth.u2f.keyHandle': u2f.keyHandle, 'auth.u2f.certificate': u2f.certificate}}, {'upsert': true})
  }

  async createOrUpdateAuthorU2FAuthRequest ({username, u2f}) {
    let db = await getDB()
    await db.collection('users').updateOne({'_id': username}, {'$set': { 'auth.u2f.authRequest': u2f.authRequest }}, {'upsert': true})
  }

  async registerTOTPSecretForUsername ({username, secret}) {
    let db = await getDB()
    await db.collection('users').updateOne({ '_id': username }, {'$set': { 'auth.totp.secret': secret }}, {'upsert': true})
  }

  async confirmTOTPSecretForUsername ({username}) {
    let db = await getDB()
    await db.collection('users').updateOne({ '_id': username }, {'$set': { 'auth.totp.confirmed': Date.now() }}, {'upsert': true})
  }

  async getTOTPForUsername ({username}) {
    let db = await getDB()
    const user = await db.collection('users').findOne({'_id': username})
    return user.auth && user.auth.totp ? user.auth.totp : null
  }
}
