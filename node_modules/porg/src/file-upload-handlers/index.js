import CreateUploadSessionController from './controllers/CreateUploadSessionController'
import ResolveChallengesController from './controllers/ResolveChallengesController'
import UploadFileController from './controllers/UploadFileController'

import { getFileHandlerUploadPersistenceProvider } from '@/providers'
import { Storage } from '@/storage'

import setupErrors from '@/file-upload-handlers/errors'

export const setupFileUploadHandlers = async ({ server, fileUploadHandlers }) => {
  let fileUploadHandlerConfig
  let persistenceProvider
  let StorageProvider
  for (const fileUploadHandler in fileUploadHandlers) {
    fileUploadHandlerConfig = fileUploadHandlers[fileUploadHandler]
    persistenceProvider = getFileHandlerUploadPersistenceProvider({
      name: fileUploadHandlerConfig.persistenceProvider
    })
    if (fileUploadHandlerConfig.storageProvider) {
      StorageProvider = Storage.get({ name: fileUploadHandlerConfig.storageProvider })
    }

    server.route({
      path: `/api/v1/file-upload-handlers/${fileUploadHandler}/upload-sessions`,
      method: 'POST',
      ...CreateUploadSessionController({ persistenceProvider, fileUploadHandlerConfig })
    })

    server.route({
      path: `/api/v1/file-upload-handlers/${fileUploadHandler}/upload-sessions/{id}/files`,
      method: 'POST',
      ...UploadFileController({ persistenceProvider, StorageProvider, fileUploadHandlerConfig })
    })

    if (fileUploadHandlerConfig.deduplication) {
      server.route({
        path: `/api/v1/file-upload-handlers/${fileUploadHandler}/upload-sessions/{id}/challenges`,
        method: 'POST',
        ...ResolveChallengesController({ persistenceProvider, fileUploadHandlerConfig })
      })
    }
  }
  setupErrors()
}
