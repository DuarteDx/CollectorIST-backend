import { errorWithKey } from '@/plugins/errors'
import nanoid from 'nanoid'
import nanoidGenerate from 'nanoid/generate'
import dictionary from 'nanoid-dictionary'
import shuffle from 'shuffle-array'
import { UploadSession } from '@/file-upload-handlers/schemas/UploadSession'
import UploadSessionState from '@/file-upload-handlers/constants/UploadSessionState'

export default async ({ persistenceProvider, deduplication, checksum }) => {
  const uploadSession = {
    _id: nanoidGenerate(dictionary.filename, 21),
    state: UploadSessionState.WAITING_FOR_FILE
  }

  if (deduplication) {
    let file = await persistenceProvider.getFileWithChecksum({ checksum })
    if (file) {
      uploadSession.checksum = checksum
      uploadSession.challenges = []
      const availableChallenges = file.challenges.length
      const picks = Math.ceil(availableChallenges * 0.4)
      if (picks === 1) {
        uploadSession.challenges.push(shuffle.pick(file.challenges, { picks }))
      } else {
        uploadSession.challenges = shuffle.pick(file.challenges, { picks })
      }
      uploadSession.nonce = nanoid(4)
      const timestamp = new Date()
      uploadSession.expiresIn = timestamp.setHours(timestamp.getHours() + 1)
      uploadSession.state = UploadSessionState.WAITING_FOR_CHALLENGES
    }
  }

  try {
    await persistenceProvider.createUploadSession({ uploadSession })
    return UploadSession(uploadSession)
  } catch (err) {
    throw errorWithKey('internal-error')
  }
}
