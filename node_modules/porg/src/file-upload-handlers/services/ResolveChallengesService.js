import { getDB } from '@/drivers/MongoDB'
import { errorWithKey } from '@/plugins/errors'
import SHA256 from 'crypto-js/sha256'
import UploadSessionState from '@/file-upload-handlers/constants/UploadSessionState'

export default async ({ persistenceProvider, session, challenges }) => {
  let db = await getDB()
  let uploadSession = await persistenceProvider.getUploadSession({ id: session })
  if (!uploadSession) {
    throw errorWithKey('upload-session-not-found', {
      ctx: { id: session }
    })
  }

  if (uploadSession.state !== UploadSessionState.WAITING_FOR_CHALLENGES) {
    throw errorWithKey('upload-session-not-found', {
      ctx: { id: session }
    })
  }

  const now = new Date()
  if (now > new Date(uploadSession.expiresIn)) {
    await persistenceProvider.setUploadSessionState({ id: session, state: UploadSessionState.INVALID })
    throw errorWithKey('upload-session-not-found', {
      ctx: { id: session }
    })
  }

  const result = SHA256(challenges.sort().join('')).toString()
  const validation = SHA256(uploadSession.challenges.map(c => SHA256(`${c.checksum}${uploadSession.nonce}`)).sort().join('')).toString()

  if (result !== validation) {
    await persistenceProvider.setUploadSessionState({ id: session, state: UploadSessionState.INVALID })
    throw errorWithKey('unsolved-upload-session-challenges', {})
  }

  let file = await db.collection('porg_files').findOne({ 'checksum': uploadSession.checksum })
  if (!file) {
    await persistenceProvider.setUploadSessionState({ id: session, state: UploadSessionState.INVALID })
    throw errorWithKey('internal-error', {})
  }

  await persistenceProvider.setUploadSessionState({ id: session, state: UploadSessionState.VALID_CHALLENGES })
  return {
    id: file._id
  }
}
