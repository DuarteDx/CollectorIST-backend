import Joi from 'joi'

export default Joi.object().keys({
  'application': Joi.object().keys({
    'protocol': Joi.string().valid(['http', 'https']).default('http'),
    'name': Joi.string().required(),
    'host': Joi.string().default('localhost'),
    'backendPort': Joi.number().min(1).max(65535).default(8000),
    'frontendPort': Joi.number().min(1).max(65535).default(8080),
    'forkInDevelopment': Joi.boolean().default(false),
    'tls': Joi.object().keys({
      'key': Joi.string().required(),
      'cert': Joi.string().required()
    })
  }).required(),
  'auth': Joi.object().keys({
    'staticBearer': Joi.object().pattern(/^[a-zA-Z]/, Joi.string()),
    'userSession': Joi.object().keys({
      'unauthorizedPath': Joi.string().default('/unauthorized'),
      'singleSignOn': Joi.object().keys({
        'sessionTime': Joi.number().default(3600),
        'jwt': Joi.object().keys({
          'secret': Joi.string().required()
        }).required(),
        'type': Joi.object().keys({
          'cas': Joi.object().keys({
            'serverUrl': Joi.string().uri({scheme: ['http', 'https']}).required(),
            'strictSSL': Joi.boolean().default(true)
          }),
          'saml': Joi.object().keys({
            loginUrl: Joi.string().uri({scheme: ['http', 'https']}).required(),
            logoutUrl: Joi.string().uri({scheme: ['http', 'https']}).required(),
            spCertificatePath: Joi.string().required(),
            spPrivateKeyPath: Joi.string().required(),
            idpCertificatePath: Joi.string().required(),
            logoutRedirect: Joi.string().uri({scheme: ['http', 'https']}).required()
          })
        }).required()
      }),
      'twoFactor': Joi.object().keys({
        'sessionTime': Joi.number().default(1200),
        'persistenceProvider': Joi.string().valid(['raw', 'mongo', 'neo4j', 'mysql']).required(),
        'modes': Joi.array().items(['totp', 'u2f']).required()
      })
    })
  }),
  'plugins': Joi.array().items(Joi.object().keys({
    'name': Joi.string().required(),
    'options': Joi.object(),
    'routes': Joi.object(),
    'once': Joi.boolean()
  })).default([]),
  'errors': Joi.object().keys({
    'localeEndpoint': Joi.string().default('/api/v1/errors')
  }).default({}),
  'papagaio': Joi.object().default({}),
  'email': Joi.object().keys({
    'throttling': Joi.object().keys({
      'persistenceProvider': Joi.string().valid(['mongo', 'neo4j', 'mysql']).required(),
      'interval': Joi.number().default(500)
    }),
    'driver': Joi.string().valid(['smtp']).default('smtp')
  }),
  'healthcheck': Joi.object().keys({
  }),
  'drivers': Joi.object().keys({
    'mongo': Joi.object().keys({
      'replicaSet': Joi.string().optional(),
      'username': Joi.string().optional(),
      'password': Joi.string().optional(),
      'servers': Joi.array().items({
        'host': Joi.string().required(),
        'port': Joi.number().integer().default(27017)
      }).min(1)
    }).optional(),
    'consul': Joi.object().keys({
      'secure': Joi.boolean(),
      'host': Joi.string(),
      'port': Joi.number()
    }).optional(),
    'elasticsearch': Joi.object().keys({
      'host': Joi.string().required()
    }).optional(),
    'smtp': Joi.object().keys({
      'host': Joi.string().default('smtp.tecnico.ulisboa.pt'),
      'port': Joi.number().integer().default(25),
      'secure': Joi.boolean().default(false)
    }).optional(),
    'neo4j': Joi.object().keys({
      'host': Joi.string().required(),
      'user': Joi.string().required(),
      'pass': Joi.string().required()
    }).optional(),
    'mysql': Joi.object().keys({
      'connectionLimit': Joi.number().min(1).max(300).default(10),
      'host': Joi.string().required(),
      'user': Joi.string().required(),
      'pass': Joi.string().required(),
      'database': Joi.string().required()
    }).optional(),
    's3': Joi.object().keys({
      'host': Joi.string().required(),
      'port': Joi.number().integer().default(443),
      'accessKey': Joi.string(),
      'secretKey': Joi.string()
    }).optional(),
    'fenixEduDrive': Joi.object().keys({
      'host': Joi.string(),
      'port': Joi.number().integer().default(443)
      // TODO
    }).optional()
  }).optional(),
  'lockProvider': Joi.object().keys({
    'type': Joi.string().valid(['consul']),
    'options': Joi.object()
      .when('type', {
        is: 'consul',
        then: Joi.object().keys({
          'keyValueStorePath': Joi.string().regex(/^([a-zA-Z0-9_-][a-zA-Z0-9_\/-]*)[a-zA-Z0-9_-]$/gm).required()
        })
      })
  }),
  'tasks': Joi.object().keys({
    'persistenceProvider': Joi.string().valid(['mongo', 'neo4j', 'mysql']).default('mongo'),
    'roles': Joi.array().items(Joi.string()).default(['admin']),
    'twoFactor': Joi.boolean().default(true)
  }),
  'migrations': Joi.object().keys({
    'persistenceProvider': Joi.string().valid(['mongo', 'neo4j', 'mysql']).default('mongo')
  }),
  'storage': Joi.object().pattern(/^/, Joi.object().keys({
    'provider': Joi.string().lowercase().valid(['fenixedu-drive', 's3', 'file-system']),
    'rootPath': Joi.string()
  })),
  'fileUploadHandlers': Joi.object().pattern(/^/, Joi.object().keys({
    'persistenceProvider': Joi.string().lowercase().valid(['mongo']).required(),
    'storageProvider': Joi.string().lowercase().required(),
    'tempStorageRootPath': Joi.string(),
    'porgAuth': Joi.object(), // will be validated by porg-auth plugin when generating endpoints
    'payload': Joi.object(), // will be validated by hapijs configuration for payload route property
    'deduplication': Joi.boolean().default(false),
    'mimeTypes': Joi.array().items(Joi.string())
  })),
  'nodeStartPath': Joi.string(),
  'metrics': Joi.object().keys({
    'collectDefaultMetrics': Joi.boolean().required(),
    'enabled': Joi.boolean().required(),
    'endpoint': Joi.string().required()
  }).default({ 'enabled': true, 'collectDefaultMetrics': true, 'endpoint': '/api/v1/metrics' })
})
