'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _papagaio = require('papagaio');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const PLUGINS_FOLDER = 'plugins';

exports.default = (() => {
  var _ref = _asyncToGenerator(function* ({ nodeStartPath }) {
    let dirMainFile = _path2.default.dirname(require.main.filename);
    if (nodeStartPath) {
      dirMainFile = _path2.default.resolve(dirMainFile, nodeStartPath);
    }
    let normalizePath = _path2.default.join(dirMainFile, PLUGINS_FOLDER);
    const plugins = [];
    if (_fs2.default.existsSync(normalizePath)) {
      _fs2.default.readdirSync(normalizePath).forEach(function (file) {
        const module = require(_path2.default.join(normalizePath, file));
        const options = module.plugin.options;
        delete module.options;
        const plugin = {
          plugin: module,
          options
        };
        plugins.push(plugin);
      });
    } else {
      (0, _papagaio.logger)(['info', 'porg', 'plugins'], 'Porg could not find any plugins folder');
    }
    return plugins;
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();

module.exports = exports['default'];