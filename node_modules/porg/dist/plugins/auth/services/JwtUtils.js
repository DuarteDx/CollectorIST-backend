'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getJwt = exports.jwtVerify = undefined;

var _jsonwebtoken = require('jsonwebtoken');

var _jsonwebtoken2 = _interopRequireDefault(_jsonwebtoken);

var _UserHasAnyTwoFactorAuth = require('./UserHasAnyTwoFactorAuth');

var _UserHasAnyTwoFactorAuth2 = _interopRequireDefault(_UserHasAnyTwoFactorAuth);

var _GetUserEnabledTwoFactors = require('./GetUserEnabledTwoFactors');

var _GetUserEnabledTwoFactors2 = _interopRequireDefault(_GetUserEnabledTwoFactors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const jwtVerify = exports.jwtVerify = ({ authorization, options, authConfig }) => {
  return new Promise((resolve, reject) => {
    _jsonwebtoken2.default.verify(authorization, options.jwt.secret, (() => {
      var _ref = _asyncToGenerator(function* (err, decoded) {
        if (err) {
          return reject('not-authenticated');
        } else {
          const needsTwoFactor = options && options.twoFactor && authConfig && authConfig.twoFactor;
          if (needsTwoFactor) {
            if (decoded.twoFactor) {
              return resolve({ credentials: decoded });
            } else {
              const userAlreadyHasTwoAuth = yield (0, _UserHasAnyTwoFactorAuth2.default)({ username: decoded.sub, getUserU2F: options.twoFactor.u2f.getUserU2F, getUserTOTP: options.twoFactor.totp.getUserTOTP });
              if (userAlreadyHasTwoAuth) {
                const userEnabledTwoFactors = yield (0, _GetUserEnabledTwoFactors2.default)({ username: decoded.sub, getUserU2F: options.twoFactor.u2f.getUserU2F, getUserTOTP: options.twoFactor.totp.getUserTOTP });
                if (userEnabledTwoFactors.includes('u2f')) {
                  return reject('requires-u2f-challenge');
                } else {
                  return reject('requires-totp-challenge');
                }
              } else {
                return reject('requires-two-factor-registration');
              }
            }
          } else {
            return resolve({ credentials: decoded });
          }
        }
      });

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    })());
  });
};

const getJwt = exports.getJwt = ({ payload, secretOrPrivateKey, options }) => {
  payload.sub = payload.username ? payload.username : payload.sub;
  delete payload.username;
  return _jsonwebtoken2.default.sign(payload, secretOrPrivateKey, options);
};