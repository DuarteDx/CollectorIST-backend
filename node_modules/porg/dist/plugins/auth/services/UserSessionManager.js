'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _JwtUtils = require('./JwtUtils');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const setup = (() => {
  var _ref = _asyncToGenerator(function* ({ principal, config, h }) {
    const token = yield (0, _JwtUtils.getJwt)({
      payload: _extends({}, principal, { twoFactor: true }),
      secretOrPrivateKey: config.jwt.secret,
      options: { expiresIn: config.jwt.expires || '1 hour' }
    });
    h.state('P_SESSION', token, { encoding: 'none', ttl: config.sessionTime * 1000, isSameSite: 'Strict', path: '/' });
    h.state('P_INFO', Buffer.from(JSON.stringify({ twoFactor: true, roles: principal.roles })).toString('base64'), { encoding: 'none', ttl: config.sessionTime * 1000, isSameSite: 'Strict', path: '/', isHttpOnly: false });
  });

  return function setup(_x) {
    return _ref.apply(this, arguments);
  };
})();

exports.default = {
  setup
};
module.exports = exports['default'];