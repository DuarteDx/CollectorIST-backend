'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _errors = require('../../../errors');

var _papagaio = require('papagaio');

var _JwtUtils = require('../../services/JwtUtils');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const handler = ({ samlOptions, options }) => {
  return (() => {
    var _ref = _asyncToGenerator(function* (request, h) {
      return new Promise(function (resolve, reject) {
        samlOptions.sp.post_assert(samlOptions.idp, { request_body: request.payload }, (() => {
          var _ref2 = _asyncToGenerator(function* (err, response) {
            if (err) {
              return reject(err);
            }
            try {
              let credentials = yield options.jwt.getPayloadForUsername(response.user.attributes);
              if (credentials === null) {
                return resolve(h.redirect(options.saml.localAppUrl + options.unauthorizedPath));
              }
              credentials.nId = response.user.name_id;
              credentials.sIndex = response.user.session_index;
              const token = (0, _JwtUtils.getJwt)({
                payload: credentials,
                secretOrPrivateKey: options.jwt.secret,
                options: { expiresIn: options.sessionTime || 60 }
              });
              let callbackUrl = request.payload['RelayState'];
              let cbUrl = new URL(callbackUrl);
              let serviceUrl = new URL(samlOptions.serviceUrl);
              if (cbUrl && serviceUrl && cbUrl.host === serviceUrl.host) {
                (0, _papagaio.logger)(['info', 'auth', 'saml'], `User ${credentials.sub} authenticated successfully`);
                h.state('P_SESSION', token, { encoding: 'none', ttl: options.sessionTime * 1000, isSameSite: 'Strict', path: '/' });
                h.state('P_INFO', Buffer.from(JSON.stringify({ twoFactor: false, roles: credentials.roles })).toString('base64'), { encoding: 'none', ttl: options.sessionTime * 1000, isSameSite: 'Strict', path: '/', isHttpOnly: false });
                return resolve(h.redirect(request.payload['RelayState']));
              } else {
                return reject((0, _errors.errorWithKey)('invalid-redirect', {
                  tags: ['error', 'auth', 'saml'],
                  metadata: { username: credentials.username, callbackUrl: cbUrl },
                  ctx: {}
                }));
              }
            } catch (err) {
              return reject(err);
            }
          });

          return function (_x3, _x4) {
            return _ref2.apply(this, arguments);
          };
        })());
      });
    });

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })();
};

const config = {
  description: 'Validate saml',
  cache: {
    privacy: 'private',
    expiresIn: 0
  },
  plugins: {
    'porg-auth': {
      type: 'no-auth'
    }
  }
};

exports.default = { handler, config };
module.exports = exports['default'];