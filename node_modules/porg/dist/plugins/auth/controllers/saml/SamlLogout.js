'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _jsonwebtoken = require('jsonwebtoken');

var _jsonwebtoken2 = _interopRequireDefault(_jsonwebtoken);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const handler = ({ samlOptions }) => {
  return (() => {
    var _ref = _asyncToGenerator(function* (request, h) {
      return new Promise(function (resolve, reject) {
        if (request.query.SAMLResponse) {
          samlOptions.sp.create_logout_response_url(samlOptions.idp, { in_response_to: request.query.SAMLResponse, relay_state: samlOptions.logoutRedirect }, (() => {
            var _ref2 = _asyncToGenerator(function* (err, response) {
              if (err) {
                return reject(err);
              }
              return resolve(h.redirect(response));
            });

            return function (_x3, _x4) {
              return _ref2.apply(this, arguments);
            };
          })());
        } else {
          const session = _jsonwebtoken2.default.decode(request.state['P_SESSION']);
          h.unstate('P_SESSION', { encoding: 'none', isSameSite: 'Strict', path: '/' });
          h.unstate('P_IS_LOGGED', { encoding: 'none', isSameSite: 'Strict', path: '/', isHttpOnly: false });
          samlOptions.sp.create_logout_request_url(samlOptions.idp, {
            relay_state: samlOptions.logoutRedirect,
            name_id: session.nId,
            session_index: session.sIndex
          }, function (err, logoutUrl) {
            if (err) {
              return reject(err);
            }
            return resolve(h.redirect(logoutUrl));
          });
        }
      });
    });

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })();
};

const config = {
  description: 'SAML Logout',
  validate: {
    query: {
      SAMLResponse: _joi2.default.string().optional(),
      RelayState: _joi2.default.string().optional()
    }
  },
  plugins: {
    'porg-auth': {
      type: 'no-auth'
    }
  }
};

exports.default = { handler, config };
module.exports = exports['default'];