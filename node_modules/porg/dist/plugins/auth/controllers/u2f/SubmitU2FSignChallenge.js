'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _u2f = require('u2f');

var _u2f2 = _interopRequireDefault(_u2f);

var _UserSessionManager = require('../../services/UserSessionManager');

var _UserSessionManager2 = _interopRequireDefault(_UserSessionManager);

var _errors = require('../../../errors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const handler = config => {
  return (() => {
    var _ref = _asyncToGenerator(function* (request, h) {
      try {
        const credentials = request.getPrincipal();
        let userU2F = yield config.twoFactor.u2f.getUserU2F({ username: credentials.username });
        if (userU2F) {
          let checkRes = _u2f2.default.checkSignature(userU2F.authRequest, request.payload, userU2F.publicKey);
          if (checkRes.successful) {
            yield _UserSessionManager2.default.setup({ principal: request.getPrincipal(), config, h });
            return {}; // returning h.state was breaking the endpoint
          } else {
            throw (0, _errors.errorWithKey)('not-authorized', {
              ctx: {}
            });
          }
        } else {
          throw (0, _errors.errorWithKey)('requires-two-factor-registration', {
            ctx: {}
          });
        }
      } catch (err) {
        throw err;
      }
    });

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })();
};

const config = {
  description: 'Submits a U2F Sign Challenge',
  plugins: {
    'porg-auth': {
      type: 'user-session',
      roles: []
    }
  }
};

exports.default = { handler, config };
module.exports = exports['default'];