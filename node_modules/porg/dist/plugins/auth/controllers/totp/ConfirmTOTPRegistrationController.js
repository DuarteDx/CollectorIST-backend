'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _otplib = require('otplib');

var _otplib2 = _interopRequireDefault(_otplib);

var _UserSessionManager = require('../../services/UserSessionManager');

var _UserSessionManager2 = _interopRequireDefault(_UserSessionManager);

var _errors = require('../../../errors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const handler = config => {
  return (() => {
    var _ref = _asyncToGenerator(function* (request, h) {
      const totp = yield config.twoFactor.totp.getUserTOTP({ username: request.getPrincipal().username });
      const isValid = _otplib2.default.authenticator.verify({ secret: totp.secret, token: request.payload.code });
      if (isValid) {
        yield config.twoFactor.totp.confirmUserTOTP({ username: request.getPrincipal().username });
        yield _UserSessionManager2.default.setup({ principal: request.getPrincipal(), config, h });
        return {}; // returning h.state was breaking the endpoint
      } else {
        throw (0, _errors.errorWithKey)('not-authorized', {
          cause: 'Invalid code',
          ctx: {}
        });
      }
    });

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })();
};

const config = {
  description: 'Confirms a TOTP registration with a given code to verify it',
  validate: {
    payload: {
      code: _joi2.default.number().integer().required()
    }
  },
  plugins: {
    'porg-auth': {
      type: 'user-session',
      roles: []
    }
  }
};

exports.default = { handler, config };
module.exports = exports['default'];