'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _otplib = require('otplib');

var _otplib2 = _interopRequireDefault(_otplib);

var _qrcode = require('qrcode');

var _qrcode2 = _interopRequireDefault(_qrcode);

var _UserHasAnyTwoFactorAuth = require('../../services/UserHasAnyTwoFactorAuth');

var _UserHasAnyTwoFactorAuth2 = _interopRequireDefault(_UserHasAnyTwoFactorAuth);

var _errors = require('../../../errors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const qrCodeToDataURL = ({ otpauth }) => {
  return new Promise(function (resolve, reject) {
    _qrcode2.default.toDataURL(otpauth, (err, imageUrl) => {
      if (err) {
        return reject(err);
      }
      return resolve({ qrcode: imageUrl });
    });
  });
};

const handler = config => {
  return (() => {
    var _ref = _asyncToGenerator(function* (request, h) {
      const username = request.getPrincipal().username;
      const userAlreadyHasTwoFactor = yield (0, _UserHasAnyTwoFactorAuth2.default)({ username, getUserU2F: config.twoFactor.u2f.getUserU2F, getUserTOTP: config.twoFactor.totp.getUserTOTP });
      if (userAlreadyHasTwoFactor && !request.auth.credentials.twoFactor) {
        throw (0, _errors.errorWithKey)('requires-totp-challenge', {
          ctx: {}
        });
      }
      const secret = _otplib2.default.authenticator.generateSecret();
      const otpauth = _otplib2.default.authenticator.keyuri(request.getPrincipal().username, config.twoFactor.totp.service, secret);
      config.twoFactor.totp.upsertUserTOTP({ username: request.getPrincipal().username, secret });
      try {
        return qrCodeToDataURL({ otpauth });
      } catch (err) {
        throw (0, _errors.errorWithKey)('internal-error', {
          ctx: {}
        });
      }
    });

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })();
};

const config = {
  description: 'Register a TOTP Secret for the logged user',
  plugins: {
    'porg-auth': {
      type: 'user-session',
      roles: []
    }
  }
};

exports.default = { handler, config };
module.exports = exports['default'];