'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _JwtUtils = require('../../services/JwtUtils');

var _simpleCasInterface = require('simple-cas-interface');

var _simpleCasInterface2 = _interopRequireDefault(_simpleCasInterface);

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _base64Url = require('base64-url');

var _base64Url2 = _interopRequireDefault(_base64Url);

var _urlParse = require('url-parse');

var _urlParse2 = _interopRequireDefault(_urlParse);

var _errors = require('../../../errors');

var _papagaio = require('papagaio');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const handler = (casOptions, options) => {
  return (() => {
    var _ref = _asyncToGenerator(function* (request, h) {
      const opts = _extends({}, casOptions);
      opts.serviceUrl = opts.serviceUrl + `/${request.params.callback}`;
      const cas = new _simpleCasInterface2.default(opts);
      const ticket = request.query.ticket;
      if (!ticket) {
        throw (0, _errors.errorWithKey)('missing-ticket', {
          tags: ['error', 'auth', 'cas'],
          ctx: {}
        });
      }
      try {
        let result = yield cas.validateServiceTicket(ticket);
        let credentials = yield options.jwt.getPayloadForUsername({ username: result.user });
        if (credentials === null) {
          return h.redirect(options.cas.localAppUrl + options.unauthorizedPath);
        }
        const token = (0, _JwtUtils.getJwt)({
          payload: credentials,
          secretOrPrivateKey: options.jwt.secret,
          options: { expiresIn: options.sessionTime || 60 }
        });
        let callbackUrl = _base64Url2.default.decode(request.params.callback);
        let cbUrl = new _urlParse2.default(callbackUrl);
        let serviceUrl = new _urlParse2.default(casOptions.serviceUrl);
        if (cbUrl && serviceUrl && cbUrl.host === serviceUrl.host) {
          (0, _papagaio.logger)(['info', 'auth', 'cas'], `User ${result.user} authenticated successfully`);

          h.state('P_SESSION', token, { encoding: 'none', ttl: options.sessionTime * 1000, isSameSite: 'Strict', path: '/' });
          h.state('P_INFO', Buffer.from(JSON.stringify({ twoFactor: false, roles: credentials.roles })).toString('base64'), { encoding: 'none', ttl: options.sessionTime * 1000, isSameSite: 'Strict', path: '/', isHttpOnly: false });
          return h.redirect(callbackUrl);
        } else {
          throw (0, _errors.errorWithKey)('invalid-redirect', {
            tags: ['error', 'auth', 'cas'],
            metadata: { username: result.user, callbackUrl: cbUrl, serviceUrl: casOptions.serviceUrl },
            ctx: {}
          });
        }
      } catch (err) {
        throw (0, _errors.errorWithKey)('not-authenticated', {
          tags: ['info', 'auth', 'cas'],
          cause: err.message,
          metadata: {},
          ctx: {}
        });
      }
    });

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })();
};

const config = {
  description: 'Validate a CAS ticket',
  cache: {
    privacy: 'private',
    expiresIn: 0
  },
  validate: {
    params: {
      callback: _joi2.default.string().required()
    }
  },
  plugins: {
    'porg-auth': {
      type: 'no-auth'
    }
  }
};

exports.default = { handler, config };
module.exports = exports['default'];