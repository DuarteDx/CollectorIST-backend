'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _JwtUtils = require('../../services/JwtUtils');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const handler = options => {
  return (() => {
    var _ref = _asyncToGenerator(function* (request, h) {
      let credentials = yield options.jwt.getPayloadForUsername({ username: request.getPrincipal().username });
      const token = (0, _JwtUtils.getJwt)({
        payload: credentials,
        secretOrPrivateKey: options.jwt.secret,
        options: { expiresIn: options.sessionTime || '1 hour' }
      });
      h.state('P_SESSION', token, { encoding: 'none', ttl: options.sessionTime * 1000, isSameSite: 'Strict', path: '/' });
      h.state('P_INFO', Buffer.from(JSON.stringify({ twoFactor: false, roles: credentials.roles })).toString('base64'), { encoding: 'none', ttl: options.sessionTime * 1000, isSameSite: 'Strict', path: '/', isHttpOnly: false });
      return h.redirect('/');
    });

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })();
};

const config = {
  description: 'Logout 2FA',
  plugins: {
    'porg-auth': {
      type: 'user-session',
      roles: [],
      twoFactor: true
    }
  }
};

exports.default = { handler, config };
module.exports = exports['default'];