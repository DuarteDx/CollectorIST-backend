'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _drivers = require('../../../drivers');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = (() => {
  var _ref = _asyncToGenerator(function* (options) {
    const status = {};
    for (let key in options.drivers) {
      if (key === 'mongo') {
        const db = yield _drivers.Mongo.getDB();
        status.mongo = db.serverConfig.isConnected();
      } else if (key === 'elasticsearch') {
        try {
          const client = yield _drivers.Elasticsearch.getClient();
          const ping = yield client.ping({ requestTimeout: 1000 });
          status.elasticsearch = ping;
        } catch (err) {
          status.elasticsearch = false;
        }
      } else if (key === 'consul') {
        try {
          const client = yield _drivers.Consul.consulClient;
          yield new Promise(function (resolve, reject) {
            client.agent.self(function (err, result) {
              if (err) {
                return reject(err);
              }
              return resolve(result);
            });
          });
          status.consul = true;
        } catch (err) {
          status.consul = false;
        }
      }
    }
    return status;
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();

module.exports = exports['default'];