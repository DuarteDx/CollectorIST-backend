'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _errors = require('../../plugins/errors');

var _nanoid = require('nanoid');

var _nanoid2 = _interopRequireDefault(_nanoid);

var _generate = require('nanoid/generate');

var _generate2 = _interopRequireDefault(_generate);

var _nanoidDictionary = require('nanoid-dictionary');

var _nanoidDictionary2 = _interopRequireDefault(_nanoidDictionary);

var _shuffleArray = require('shuffle-array');

var _shuffleArray2 = _interopRequireDefault(_shuffleArray);

var _UploadSession = require('../schemas/UploadSession');

var _UploadSessionState = require('../constants/UploadSessionState');

var _UploadSessionState2 = _interopRequireDefault(_UploadSessionState);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = (() => {
  var _ref = _asyncToGenerator(function* ({ persistenceProvider, deduplication, checksum }) {
    const uploadSession = {
      _id: (0, _generate2.default)(_nanoidDictionary2.default.filename, 21),
      state: _UploadSessionState2.default.WAITING_FOR_FILE
    };

    if (deduplication) {
      let file = yield persistenceProvider.getFileWithChecksum({ checksum });
      if (file) {
        uploadSession.checksum = checksum;
        uploadSession.challenges = [];
        const availableChallenges = file.challenges.length;
        const picks = Math.ceil(availableChallenges * 0.4);
        if (picks === 1) {
          uploadSession.challenges.push(_shuffleArray2.default.pick(file.challenges, { picks }));
        } else {
          uploadSession.challenges = _shuffleArray2.default.pick(file.challenges, { picks });
        }
        uploadSession.nonce = (0, _nanoid2.default)(4);
        const timestamp = new Date();
        uploadSession.expiresIn = timestamp.setHours(timestamp.getHours() + 1);
        uploadSession.state = _UploadSessionState2.default.WAITING_FOR_CHALLENGES;
      }
    }

    try {
      yield persistenceProvider.createUploadSession({ uploadSession });
      return (0, _UploadSession.UploadSession)(uploadSession);
    } catch (err) {
      throw (0, _errors.errorWithKey)('internal-error');
    }
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();

module.exports = exports['default'];