'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _MongoDB = require('../../drivers/MongoDB');

var _errors = require('../../plugins/errors');

var _sha = require('crypto-js/sha256');

var _sha2 = _interopRequireDefault(_sha);

var _UploadSessionState = require('../constants/UploadSessionState');

var _UploadSessionState2 = _interopRequireDefault(_UploadSessionState);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = (() => {
  var _ref = _asyncToGenerator(function* ({ persistenceProvider, session, challenges }) {
    let db = yield (0, _MongoDB.getDB)();
    let uploadSession = yield persistenceProvider.getUploadSession({ id: session });
    if (!uploadSession) {
      throw (0, _errors.errorWithKey)('upload-session-not-found', {
        ctx: { id: session }
      });
    }

    if (uploadSession.state !== _UploadSessionState2.default.WAITING_FOR_CHALLENGES) {
      throw (0, _errors.errorWithKey)('upload-session-not-found', {
        ctx: { id: session }
      });
    }

    const now = new Date();
    if (now > new Date(uploadSession.expiresIn)) {
      yield persistenceProvider.setUploadSessionState({ id: session, state: _UploadSessionState2.default.INVALID });
      throw (0, _errors.errorWithKey)('upload-session-not-found', {
        ctx: { id: session }
      });
    }

    const result = (0, _sha2.default)(challenges.sort().join('')).toString();
    const validation = (0, _sha2.default)(uploadSession.challenges.map(function (c) {
      return (0, _sha2.default)(`${c.checksum}${uploadSession.nonce}`);
    }).sort().join('')).toString();

    if (result !== validation) {
      yield persistenceProvider.setUploadSessionState({ id: session, state: _UploadSessionState2.default.INVALID });
      throw (0, _errors.errorWithKey)('unsolved-upload-session-challenges', {});
    }

    let file = yield db.collection('porg_files').findOne({ 'checksum': uploadSession.checksum });
    if (!file) {
      yield persistenceProvider.setUploadSessionState({ id: session, state: _UploadSessionState2.default.INVALID });
      throw (0, _errors.errorWithKey)('internal-error', {});
    }

    yield persistenceProvider.setUploadSessionState({ id: session, state: _UploadSessionState2.default.VALID_CHALLENGES });
    return {
      id: file._id
    };
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();

module.exports = exports['default'];