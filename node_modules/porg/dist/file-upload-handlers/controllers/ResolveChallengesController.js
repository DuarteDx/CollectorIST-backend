'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _ResolveChallengesService = require('../services/ResolveChallengesService');

var _ResolveChallengesService2 = _interopRequireDefault(_ResolveChallengesService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = ({ persistenceProvider, fileUploadHandlerConfig }) => {
  const handler = (() => {
    var _ref = _asyncToGenerator(function* (request, h) {
      return (0, _ResolveChallengesService2.default)({
        persistenceProvider,
        session: request.params.id,
        challenges: request.payload.challenges
      });
    });

    return function handler(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })();

  const config = {
    description: 'Resolves upload session challenges',
    validate: {
      params: {
        id: _joi2.default.string().required()
      },
      payload: {
        challenges: _joi2.default.array().items(_joi2.default.string()).max(30).required()
      }
    },
    plugins: _extends({}, fileUploadHandlerConfig.porgAuth && { 'porg-auth': fileUploadHandlerConfig.porgAuth })
  };

  return {
    handler,
    config
  };
};

module.exports = exports['default'];