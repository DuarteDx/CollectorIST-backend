'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setupFileUploadHandlers = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _CreateUploadSessionController = require('./controllers/CreateUploadSessionController');

var _CreateUploadSessionController2 = _interopRequireDefault(_CreateUploadSessionController);

var _ResolveChallengesController = require('./controllers/ResolveChallengesController');

var _ResolveChallengesController2 = _interopRequireDefault(_ResolveChallengesController);

var _UploadFileController = require('./controllers/UploadFileController');

var _UploadFileController2 = _interopRequireDefault(_UploadFileController);

var _providers = require('../providers');

var _storage = require('../storage');

var _errors = require('./errors');

var _errors2 = _interopRequireDefault(_errors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const setupFileUploadHandlers = exports.setupFileUploadHandlers = (() => {
  var _ref = _asyncToGenerator(function* ({ server, fileUploadHandlers }) {
    let fileUploadHandlerConfig;
    let persistenceProvider;
    let StorageProvider;
    for (const fileUploadHandler in fileUploadHandlers) {
      fileUploadHandlerConfig = fileUploadHandlers[fileUploadHandler];
      persistenceProvider = (0, _providers.getFileHandlerUploadPersistenceProvider)({
        name: fileUploadHandlerConfig.persistenceProvider
      });
      if (fileUploadHandlerConfig.storageProvider) {
        StorageProvider = _storage.Storage.get({ name: fileUploadHandlerConfig.storageProvider });
      }

      server.route(_extends({
        path: `/api/v1/file-upload-handlers/${fileUploadHandler}/upload-sessions`,
        method: 'POST'
      }, (0, _CreateUploadSessionController2.default)({ persistenceProvider, fileUploadHandlerConfig })));

      server.route(_extends({
        path: `/api/v1/file-upload-handlers/${fileUploadHandler}/upload-sessions/{id}/files`,
        method: 'POST'
      }, (0, _UploadFileController2.default)({ persistenceProvider, StorageProvider, fileUploadHandlerConfig })));

      if (fileUploadHandlerConfig.deduplication) {
        server.route(_extends({
          path: `/api/v1/file-upload-handlers/${fileUploadHandler}/upload-sessions/{id}/challenges`,
          method: 'POST'
        }, (0, _ResolveChallengesController2.default)({ persistenceProvider, fileUploadHandlerConfig })));
      }
    }
    (0, _errors2.default)();
  });

  return function setupFileUploadHandlers(_x) {
    return _ref.apply(this, arguments);
  };
})();