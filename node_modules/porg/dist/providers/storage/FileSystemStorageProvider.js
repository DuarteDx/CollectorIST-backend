'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require('fs');

var fs = _interopRequireWildcard(_fs);

var _path = require('path');

var path = _interopRequireWildcard(_path);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

class FileSystemStorageProvider {
  constructor({ rootPath }) {
    this.rootPath = rootPath;
  }

  storeFile({ file, filePath }) {
    const fullFilePath = path.join(this.rootPath, filePath);
    const fileDirname = path.dirname(fullFilePath);
    _mkdirp2.default.sync(fileDirname);
    return new Promise((resolve, reject) => {
      const filePersistence = fs.createWriteStream(fullFilePath);
      filePersistence.on('error', err => {
        return reject(err);
      });
      file.pipe(filePersistence);
      file.on('end', () => {
        return resolve(true);
      }).on('error', error => {
        this.deleteFile({ filePath });
        return reject(error);
      });
    });
  }

  downloadFile({ filePath }) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const fullFilePath = path.join(_this.rootPath, filePath);
      return fs.createReadStream(fullFilePath);
    })();
  }

  deleteFile({ filePath }) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      const fullFilePath = path.join(_this2.rootPath, filePath);
      if (fs.existsSync(fullFilePath)) {
        fs.unlinkSync(fullFilePath);
      }
    })();
  }

  listFiles({ searchPath }) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      const fullPath = path.join(_this3.rootPath, searchPath);
      return fs.readdirSync(path.dirname(fullPath));
    })();
  }
}
exports.default = FileSystemStorageProvider;
module.exports = exports['default'];