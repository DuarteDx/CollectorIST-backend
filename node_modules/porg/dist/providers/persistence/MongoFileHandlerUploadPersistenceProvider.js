'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _MongoDB = require('../../drivers/MongoDB');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

class MongoFileHandlerUploadPersistenceProvider {
  getUploadSession({ id }) {
    return _asyncToGenerator(function* () {
      let db = yield (0, _MongoDB.getDB)();
      return db.collection('porg_upload_sessions').findOne({ '_id': id });
    })();
  }

  createUploadSession({ uploadSession }) {
    return _asyncToGenerator(function* () {
      let db = yield (0, _MongoDB.getDB)();
      yield db.collection('porg_upload_sessions').insertOne(uploadSession);
    })();
  }

  setUploadSessionState({ id, state }) {
    return _asyncToGenerator(function* () {
      let db = yield (0, _MongoDB.getDB)();
      yield db.collection('porg_upload_sessions').updateOne({ '_id': id }, { $set: { state } });
    })();
  }

  insertFile({ file }) {
    return _asyncToGenerator(function* () {
      let db = yield (0, _MongoDB.getDB)();
      yield db.collection('porg_files').insertOne(file);
    })();
  }

  getFileWithChecksum({ checksum }) {
    return _asyncToGenerator(function* () {
      let db = yield (0, _MongoDB.getDB)();
      return db.collection('porg_files').findOne({ checksum });
    })();
  }
}
exports.default = MongoFileHandlerUploadPersistenceProvider;
module.exports = exports['default'];