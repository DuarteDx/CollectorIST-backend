'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _MongoDB = require('../../drivers/MongoDB');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

class MongoMigrationPersistenceProvider {
  getDbVersion() {
    return _asyncToGenerator(function* () {
      const db = yield (0, _MongoDB.getDB)();
      const schemaInfo = yield db.collection('porg_db_schema_metadata').findOne({}, { 'sort': { '_id': -1 } });
      return schemaInfo ? schemaInfo._id : 0;
    })();
  }

  setDbVersion({ dbVersion }) {
    return _asyncToGenerator(function* () {
      const db = yield (0, _MongoDB.getDB)();
      yield db.collection('porg_db_schema_metadata').insertOne({ 'timestamp': (0, _moment2.default)().toDate(), '_id': dbVersion });
    })();
  }
}
exports.default = MongoMigrationPersistenceProvider;
module.exports = exports['default'];