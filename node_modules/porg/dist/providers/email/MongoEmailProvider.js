'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _MongoDB = require('../../drivers/MongoDB');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const emailState = {
  pending: 'pending',
  sended: 'sended',
  timeout: 'timeout'
};

class MongoEmailProvider {
  getNextEmails() {
    return _asyncToGenerator(function* () {
      let db = yield (0, _MongoDB.getDB)();
      const emails = yield db.collection('porg-emails').find({ emailState: emailState.pending }).limit(60).toArray();
      return emails;
    })();
  }

  insertEmail({ from, to, subject, text, html, deliveryTime, expireTime }) {
    return _asyncToGenerator(function* () {
      let db = yield (0, _MongoDB.getDB)();
      yield db.collection('porg-emails').insertOne({ from, to, subject, text, html, deliveryTime, expireTime, emailState: emailState.pending });
    })();
  }

  updateEmailState({ id, state }) {
    return _asyncToGenerator(function* () {
      if (state === emailState.sended || state === emailState.timeout) {
        let db = yield (0, _MongoDB.getDB)();
        yield db.collection('porg-emails').updateOne({ '_id': id }, { '$set': { 'emailState': state } }, { 'upsert': false });
      } else {
        throw new Error('Invalid email state');
      }
    })();
  }
}
exports.default = MongoEmailProvider;
module.exports = exports['default'];