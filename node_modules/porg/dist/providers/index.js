'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getStorageProvider = exports.getFileHandlerUploadPersistenceProvider = exports.getEmailProvider = exports.getPersistenceTaskProvider = exports.getPersistenceMigrationProvider = exports.getLockProvider = exports.getUserAuthProvider = undefined;

var _MongoUserAuthProvider = require('./auth/MongoUserAuthProvider');

var _MongoUserAuthProvider2 = _interopRequireDefault(_MongoUserAuthProvider);

var _RawUserAuthProvider = require('./auth/RawUserAuthProvider');

var _RawUserAuthProvider2 = _interopRequireDefault(_RawUserAuthProvider);

var _ConsulLockProvider = require('./lock/ConsulLockProvider');

var _ConsulLockProvider2 = _interopRequireDefault(_ConsulLockProvider);

var _MongoMigrationPersistenceProvider = require('./persistence/MongoMigrationPersistenceProvider');

var _MongoMigrationPersistenceProvider2 = _interopRequireDefault(_MongoMigrationPersistenceProvider);

var _MongoTaskPersistenceProvider = require('./persistence/MongoTaskPersistenceProvider');

var _MongoTaskPersistenceProvider2 = _interopRequireDefault(_MongoTaskPersistenceProvider);

var _MongoEmailProvider = require('./email/MongoEmailProvider');

var _MongoEmailProvider2 = _interopRequireDefault(_MongoEmailProvider);

var _MongoFileHandlerUploadPersistenceProvider = require('./persistence/MongoFileHandlerUploadPersistenceProvider');

var _MongoFileHandlerUploadPersistenceProvider2 = _interopRequireDefault(_MongoFileHandlerUploadPersistenceProvider);

var _FenixEduDriveStorageProvider = require('./storage/FenixEduDriveStorageProvider');

var _FenixEduDriveStorageProvider2 = _interopRequireDefault(_FenixEduDriveStorageProvider);

var _S3StorageProvider = require('./storage/S3StorageProvider');

var _S3StorageProvider2 = _interopRequireDefault(_S3StorageProvider);

var _FileSystemStorageProvider = require('./storage/FileSystemStorageProvider');

var _FileSystemStorageProvider2 = _interopRequireDefault(_FileSystemStorageProvider);

var _ = require('./../');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getUserAuthProvider = exports.getUserAuthProvider = ({ name }) => {
  switch (name) {
    case 'raw':
      return new _RawUserAuthProvider2.default();
    case 'mongo':
      return new _MongoUserAuthProvider2.default();
    default:
      throw new Error('Invalid user auth provider');
  }
};

const getLockProvider = exports.getLockProvider = ({ name }) => {
  switch (name) {
    case 'consul':
      return new _ConsulLockProvider2.default({ rootPath: _.config.lockProvider.options.keyValueStorePath });
    default:
      throw new Error('Invalid lock provider');
  }
};

const getPersistenceMigrationProvider = exports.getPersistenceMigrationProvider = ({ name }) => {
  switch (name) {
    case 'mongo':
      return new _MongoMigrationPersistenceProvider2.default();
    default:
      throw new Error('Invalid persistence migration provider');
  }
};

const getPersistenceTaskProvider = exports.getPersistenceTaskProvider = ({ name }) => {
  switch (name) {
    case 'mongo':
      return new _MongoTaskPersistenceProvider2.default();
    default:
      throw new Error('Invalid persistence task provider');
  }
};

const getEmailProvider = exports.getEmailProvider = ({ name }) => {
  switch (name) {
    case 'mongo':
      return new _MongoEmailProvider2.default();
    default:
      throw new Error('Invalid persistence email provider');
  }
};

const getFileHandlerUploadPersistenceProvider = exports.getFileHandlerUploadPersistenceProvider = ({ name }) => {
  switch (name) {
    case 'mongo':
      return new _MongoFileHandlerUploadPersistenceProvider2.default();
    default:
      throw new Error('Invalid persistence provider for File Handler Upload');
  }
};

const getStorageProvider = exports.getStorageProvider = ({ name, rootPath }) => {
  switch (name) {
    case 'fenixedu-drive':
      return new _FenixEduDriveStorageProvider2.default({ rootPath });
    case 's3':
      return new _S3StorageProvider2.default({ rootPath });
    case 'file-system':
      return new _FileSystemStorageProvider2.default({ rootPath });
    default:
      throw new Error('Invalid storage provider');
  }
};