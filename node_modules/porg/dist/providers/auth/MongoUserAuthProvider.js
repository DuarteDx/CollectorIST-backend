'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _MongoDB = require('../../drivers/MongoDB');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

class MongoUserAuthProvider {
  getU2FForUsername({ username }) {
    return _asyncToGenerator(function* () {
      let db = yield (0, _MongoDB.getDB)();
      const user = yield db.collection('users').findOne({ '_id': username });
      return user.auth ? user.auth.u2f : undefined;
    })();
  }

  createOrUpdateAuthorU2FAuth({ username, u2f }) {
    return _asyncToGenerator(function* () {
      let db = yield (0, _MongoDB.getDB)();
      yield db.collection('users').updateOne({ '_id': username }, { '$set': { 'auth.u2f.publicKey': u2f.publicKey, 'auth.u2f.keyHandle': u2f.keyHandle, 'auth.u2f.certificate': u2f.certificate } }, { 'upsert': true });
    })();
  }

  createOrUpdateAuthorU2FAuthRequest({ username, u2f }) {
    return _asyncToGenerator(function* () {
      let db = yield (0, _MongoDB.getDB)();
      yield db.collection('users').updateOne({ '_id': username }, { '$set': { 'auth.u2f.authRequest': u2f.authRequest } }, { 'upsert': true });
    })();
  }

  registerTOTPSecretForUsername({ username, secret }) {
    return _asyncToGenerator(function* () {
      let db = yield (0, _MongoDB.getDB)();
      yield db.collection('users').updateOne({ '_id': username }, { '$set': { 'auth.totp.secret': secret } }, { 'upsert': true });
    })();
  }

  confirmTOTPSecretForUsername({ username }) {
    return _asyncToGenerator(function* () {
      let db = yield (0, _MongoDB.getDB)();
      yield db.collection('users').updateOne({ '_id': username }, { '$set': { 'auth.totp.confirmed': Date.now() } }, { 'upsert': true });
    })();
  }

  getTOTPForUsername({ username }) {
    return _asyncToGenerator(function* () {
      let db = yield (0, _MongoDB.getDB)();
      const user = yield db.collection('users').findOne({ '_id': username });
      return user.auth && user.auth.totp ? user.auth.totp : null;
    })();
  }
}
exports.default = MongoUserAuthProvider;
module.exports = exports['default'];