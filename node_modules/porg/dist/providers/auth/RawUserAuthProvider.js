'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const users = {
  'ist167033': {
    username: 'ist167033',
    roles: ['admin'],
    auth: {}
  }
};

class RawUserAuthProvider {
  getU2FForUsername({ username }) {
    return _asyncToGenerator(function* () {
      return users[username].auth.u2f;
    })();
  }

  createOrUpdateAuthorU2FAuth({ username, u2f }) {
    return _asyncToGenerator(function* () {
      users[username].auth.u2f.publicKey = u2f.publicKey;
      users[username].auth.u2f.keyHandle = u2f.keyHandle;
      users[username].auth.u2f.certificate = u2f.certificate;
    })();
  }

  createOrUpdateAuthorU2FAuthRequest({ username, u2f }) {
    return _asyncToGenerator(function* () {
      users[username].auth.u2f.authRequest = u2f.authRequest;
    })();
  }

  registerTOTPSecretForUsername({ username, secret }) {
    return _asyncToGenerator(function* () {
      users[username].auth.totp.secret = secret;
    })();
  }

  confirmTOTPSecretForUsername({ username }) {
    return _asyncToGenerator(function* () {
      users[username].auth.totp.confirmed = Date.now();
    })();
  }

  getTOTPForUsername({ username }) {
    return _asyncToGenerator(function* () {
      return users[username].auth ? users[username].auth.totp : null;
    })();
  }
}
exports.default = RawUserAuthProvider;
module.exports = exports['default'];