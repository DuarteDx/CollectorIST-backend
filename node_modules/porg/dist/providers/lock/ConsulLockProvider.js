'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Consul = require('../../drivers/Consul');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const sessionCreate = () => {
  return new Promise((resolve, reject) => {
    _Consul.consulClient.session.create({
      lockdelay: '1s',
      ttl: '10s'
    }, (err, result) => {
      if (err) {
        return reject(err);
      }
      return resolve(result.ID);
    });
  });
};

const sessionRenew = ({ SessionId }) => {
  return new Promise((resolve, reject) => {
    _Consul.consulClient.session.renew(SessionId, (err, renew) => {
      if (err) {
        return reject(err);
      }
      return resolve(renew);
    });
  });
};

const sessionDestroy = ({ SessionId }) => {
  return new Promise((resolve, reject) => {
    _Consul.consulClient.session.destroy(SessionId, err => {
      if (err) {
        return reject(err);
      }
      return resolve();
    });
  });
};

class Session {
  constructor({ sessionId, rootPath }) {
    this.sessionId = sessionId;
    this.rootPath = rootPath;
  }

  renewSession() {
    var _this = this;

    return _asyncToGenerator(function* () {
      return sessionRenew({ SessionId: _this.sessionId });
    })();
  }

  destroySession() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      return sessionDestroy({ SessionId: _this2.sessionId });
    })();
  }

  getSessionId() {
    return this.sessionId;
  }

  hasLock({ lockId }) {
    return new Promise((resolve, reject) => {
      _Consul.consulClient.kv.get({
        key: `${this.rootPath}/${lockId}`
      }, (err, result) => {
        if (err) {
          return reject(err);
        }
        if (result && result.Session === this.sessionId) {
          return resolve(true);
        } else {
          return resolve(false);
        }
      });
    });
  }

  attemptLock({ lockId }) {
    return new Promise((resolve, reject) => {
      _Consul.consulClient.kv.set({
        key: `${this.rootPath}/${lockId}`,
        value: this.sessionId,
        acquire: this.sessionId
      }, (err, result) => {
        if (err) {
          return reject(err);
        } else {
          return resolve(result);
        }
      });
    });
  }
  releaseLock({ lockId }) {
    return new Promise((resolve, reject) => {
      _Consul.consulClient.kv.set({
        key: `${this.rootPath}/${lockId}`,
        value: this.sessionId,
        release: this.sessionId
      }, (err, result) => {
        if (err) {
          return reject(err);
        } else {
          return resolve(true);
        }
      });
    });
  }
}

class ConsulLockProvider {
  constructor({ rootPath }) {
    this.rootPath = rootPath;
    this.sessionId = null;
  }

  createSession() {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      const id = yield sessionCreate();
      return new Session({ sessionId: id, rootPath: _this3.rootPath });
    })();
  }

  getSession({ id }) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      return new Session({ sessionId: id, rootPath: _this4.rootPath });
    })();
  }
}
exports.default = ConsulLockProvider;
module.exports = exports['default'];