'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cleanDatabase = exports.shutdown = exports.int = exports.write = exports.read = exports.configDriver = undefined;

var _neo4jDriver = require('neo4j-driver');

var _papagaio = require('papagaio');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

let driver = null;
let config = null;
const configDriver = ({ options }) => {
  config = options;
  driver = _neo4jDriver.v1.driver(config.neo4j.host, _neo4jDriver.v1.auth.basic(config.neo4j.user, config.neo4j.pass));
};

const read = (query, params) => {
  return new Promise((resolve, reject) => {
    const session = driver.session();
    session.readTransaction(transaction => {
      transaction.run(query, params).then(result => {
        session.close();
        return resolve(result.records);
      }).catch(err => {
        session.close();
        return reject(err);
      });
    });
  });
};

const write = (query, params) => {
  return new Promise((resolve, reject) => {
    const session = driver.session();
    session.writeTransaction(transaction => {
      transaction.run(query, params).then(result => {
        session.close();
        return resolve(result.records);
      }).catch(err => {
        session.close();
        return reject(err);
      });
    });
  });
};

const cleanDatabase = (() => {
  var _ref = _asyncToGenerator(function* () {
    throw new Error('Clean database not defined');
  });

  return function cleanDatabase() {
    return _ref.apply(this, arguments);
  };
})();

const shutdown = (() => {
  var _ref2 = _asyncToGenerator(function* () {
    (0, _papagaio.logger)(['info', 'database', 'neo4j'], 'Terminating Neo4J database driver');
  });

  return function shutdown() {
    return _ref2.apply(this, arguments);
  };
})();

const int = _neo4jDriver.v1.int;

exports.configDriver = configDriver;
exports.read = read;
exports.write = write;
exports.int = int;
exports.shutdown = shutdown;
exports.cleanDatabase = cleanDatabase;