'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cleanDatabase = exports.shutdown = exports.pool = exports.configDriver = undefined;

var _mysql = require('mysql');

var _mysql2 = _interopRequireDefault(_mysql);

var _papagaio = require('papagaio');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

let pool = null;

const configDriver = ({ options }) => {
  exports.pool = pool = _mysql2.default.createPool({
    connectionLimit: options.connectionLimit,
    host: options.host,
    user: options.user,
    password: options.pass,
    database: options.database
  });
};

const shutdown = () => {
  (0, _papagaio.logger)(['info', 'database', 'mysql'], 'MySQL Pool is shutting down...');
  pool.end(() => {
    (0, _papagaio.logger)(['info', 'database', 'mysql'], 'MySQL Pool successfully terminated!');
  });
};

const cleanDatabase = (() => {
  var _ref = _asyncToGenerator(function* () {
    throw new Error('Clean database not defined');
  });

  return function cleanDatabase() {
    return _ref.apply(this, arguments);
  };
})();

exports.configDriver = configDriver;
exports.pool = pool;
exports.shutdown = shutdown;
exports.cleanDatabase = cleanDatabase;