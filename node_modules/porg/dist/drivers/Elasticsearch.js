'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cleanDatabase = exports.shutdown = exports.getClient = exports.configDriver = undefined;

var _elasticsearch = require('elasticsearch');

var _elasticsearch2 = _interopRequireDefault(_elasticsearch);

var _ = require('./../');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

let client;
const configDriver = ({ options }) => {
  client = new _elasticsearch2.default.Client(options);
};

const getClient = () => {
  return new Promise((resolve, reject) => {
    if (!client) {
      return reject(new Error('Elasticsearch driver needs to be initialize'));
    }
    return resolve(client);
  });
};

const cleanDatabase = (() => {
  var _ref = _asyncToGenerator(function* () {
    // Only cleans default application index
    if (yield client.indices.exists(_.config.application.name)) {
      yield client.indices.delete({ index: _.config.application.name });
    }
  });

  return function cleanDatabase() {
    return _ref.apply(this, arguments);
  };
})();

const shutdown = (() => {
  var _ref2 = _asyncToGenerator(function* () {});

  return function shutdown() {
    return _ref2.apply(this, arguments);
  };
})();

exports.configDriver = configDriver;
exports.getClient = getClient;
exports.shutdown = shutdown;
exports.cleanDatabase = cleanDatabase;