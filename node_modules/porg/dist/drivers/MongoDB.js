'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cleanDatabase = exports.ObjectID = exports.shutdown = exports.getClient = exports.getDB = exports.configDriver = undefined;

var _mongodb = require('mongodb');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

let dbInstance;
let config = null;
const configDriver = ({ options }) => {
  config = options;
};
let clientMongo;

const mongoConnect = (address, cb) => {
  if (!dbInstance) {
    const hosts = config.servers.map(({ host, port }) => {
      return `${host}:${port}`;
    }).join(',');
    let authPrefix = '';
    if (config['username'] && config['password']) {
      authPrefix = `${config['username']}:${config['password']}@`;
    }
    let url = `mongodb://${authPrefix}${hosts}/${config.collection}?authMechanism=SCRAM-SHA-1`;
    if (config['replicaSet']) {
      url += `&replicaSet=${config['replicaSet']}`;
    }

    _mongodb.MongoClient.connect(url, {
      useNewUrlParser: true,
      reconnectInterval: 1000,
      reconnectTries: Number.MAX_SAFE_INTEGER
    }, (err, client) => {
      if (!err) {
        dbInstance = client.db(config.collection);
        clientMongo = client;
      }
      return cb(err, dbInstance);
    });
  } else {
    return cb(null, dbInstance);
  }
};

const getDB = () => {
  return new Promise((resolve, reject) => {
    if (!config) {
      return reject(new Error('Mongo driver needs to be initialize'));
    }
    mongoConnect(config.mongoUrl, err => {
      if (err) {
        return reject(err);
      } else {
        return resolve(dbInstance);
      }
    });
  });
};

const getClient = () => {
  return new Promise((resolve, reject) => {
    if (!config) {
      return reject(new Error('Mongo driver needs to be initialized'));
    }
    return resolve(clientMongo);
  });
};

const cleanDatabase = (() => {
  var _ref = _asyncToGenerator(function* () {
    if (dbInstance.serverConfig.isConnected()) {
      const db = yield getDB();
      yield db.dropDatabase();
    }
  });

  return function cleanDatabase() {
    return _ref.apply(this, arguments);
  };
})();

const shutdown = (() => {
  var _ref2 = _asyncToGenerator(function* () {
    if (dbInstance.serverConfig.isConnected()) {
      yield clientMongo.close(true);
      dbInstance = null;
    }
  });

  return function shutdown() {
    return _ref2.apply(this, arguments);
  };
})();

exports.configDriver = configDriver;
exports.getDB = getDB;
exports.getClient = getClient;
exports.shutdown = shutdown;
exports.ObjectID = _mongodb.ObjectID;
exports.cleanDatabase = cleanDatabase;