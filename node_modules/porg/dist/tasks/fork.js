'use strict';

var _ = require('./../');

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _StatusTask = require('./StatusTask');

var _StatusTask2 = _interopRequireDefault(_StatusTask);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const processInit = (() => {
  var _ref = _asyncToGenerator(function* ({ instanceId, porgYmlPath, taskPath, taskInfo, input, sessionId }) {
    const pid = process.pid;
    const platform = process.platform;
    const hostname = _os2.default.hostname();
    const status = _StatusTask2.default.Running;
    const startDate = (0, _moment2.default)().valueOf();
    process.send({ type: 'update', params: { id: instanceId, pid, platform, hostname, status, startDate } });
    yield (0, _.porgFork)({ porgYmlPath });
    let TaskClass;
    if (taskPath) {
      const loadedTask = require(taskPath);
      TaskClass = loadedTask.default;
    } else {// If task with src in db

    }
    const task = new TaskClass({ name: taskInfo.id });
    yield task.execute({ id: instanceId, input, sessionId });
  });

  return function processInit(_x) {
    return _ref.apply(this, arguments);
  };
})();

process.on('message', (() => {
  var _ref2 = _asyncToGenerator(function* (m) {
    switch (m.type) {
      case 'init':
        yield processInit(m);
        break;
      default:
        throw new Error('invalid type');
    }
  });

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
})());

process.on('SIGTERM', _asyncToGenerator(function* () {
  process.send({ type: 'abort', err: 'Killed by SIGTERM' });
}));