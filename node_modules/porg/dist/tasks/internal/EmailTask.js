'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cron = exports.execution = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _Task = require('../Task');

var _Task2 = _interopRequireDefault(_Task);

var _ = require('../../');

var _providers = require('../../providers');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _Email = require('../../emails/Email');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

// execution: cron, none
const execution = exports.execution = 'cron';

// Run every minute
const cron = exports.cron = '0 * * * * *';

const sleep = miliseconds => {
  return new Promise((resolve, reject) => {
    setTimeout(resolve, miliseconds);
  });
};

class EmailTask extends _Task2.default {
  run(args) {
    var _this = this;

    return _asyncToGenerator(function* () {
      if (_.config.email && _.config.email.throttling) {
        _this.println('Start sending emails');
        yield _this.flushPrint();
        const emailProvider = (0, _providers.getEmailProvider)({ name: _.config.email.throttling.persistenceProvider });
        let emails = yield emailProvider.getNextEmails();
        const now = (0, _moment2.default)();
        for (const email of emails) {
          const delivery = (0, _moment2.default)(email.deliveryTime);
          const expire = (0, _moment2.default)(email.expireTime);
          if (delivery.isBefore(now)) {
            if (expire.isAfter(now)) {
              const emailConfig = _extends({}, email);
              delete emailConfig._id;
              delete emailConfig.emailState;
              yield (0, _Email.sendByDrive)(emailConfig);
              yield emailProvider.updateEmailState({ id: email._id, state: 'sended' });
              yield sleep(_.config.email.throttling.interval);

              _this.println('Sending email with id ' + email._id);
              yield _this.flushPrint();
            } else {
              yield emailProvider.updateEmailState({ id: email._id, state: 'timeout' });
              _this.println('Aborting email with id ' + email._id + ', because of timeout');
              yield _this.flushPrint();
            }
          }
        }
      }
    })();
  }
}
exports.default = EmailTask;