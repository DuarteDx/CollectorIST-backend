'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _ = require('./..');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const handler = ({ persistentTaskProvider }) => {
  return (() => {
    var _ref = _asyncToGenerator(function* (request, h) {
      let input;
      try {
        input = JSON.parse(request.payload.input);
      } catch (err) {
        input = JSON.parse({});
      }
      const task = yield _.tasks.runTask({ name: request.params.id, input });
      return { id: task.getId() };
    });

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })();
};

const config = ({ roles, twoFactor }) => {
  return {
    description: 'Create task instance',
    validate: {
      params: {
        id: _joi2.default.string().required()
      },
      payload: {
        input: _joi2.default.string().required()
      }
    },
    plugins: {
      'porg-auth': {
        type: 'user-session',
        twoFactor,
        roles
      }
    }
  };
};

exports.default = { handler, config };
module.exports = exports['default'];