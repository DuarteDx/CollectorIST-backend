'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _babelCore = require('babel-core');

var _requireFromString = require('require-from-string');

var _requireFromString2 = _interopRequireDefault(_requireFromString);

var _cronParser = require('cron-parser');

var _cronParser2 = _interopRequireDefault(_cronParser);

var _sha = require('sha1');

var _sha2 = _interopRequireDefault(_sha);

var _ = require('./..');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const EXECUTION_TIME_LIMIT = 1; // In minutes

const handler = ({ persistentTaskProvider }) => {
  return (() => {
    var _ref = _asyncToGenerator(function* (request, h) {
      try {
        const src = request.payload.src;
        const directory = _path2.default.join(__dirname, '../../../.babelrc');
        const { code } = (0, _babelCore.transform)(src, { extends: directory });
        const loadedTask = (0, _requireFromString2.default)(code);
        let taskExecution = loadedTask.execution;
        let TaskClass = loadedTask.default;
        let taskCronExpression = loadedTask.cron;
        let executionTimeLimit = loadedTask.timeLimit ? loadedTask.timeLimit : EXECUTION_TIME_LIMIT;
        let execution;
        if (taskExecution === 'cron') {
          _cronParser2.default.parseExpression(taskCronExpression); // throws error if not a cron expression
          execution = 'cron';
        } else if (taskExecution === 'none') {
          execution = 'none';
        } else {
          throw new Error('Invalid execution option');
        }
        let taskName = TaskClass.name;
        let version = (0, _sha2.default)(String(taskName + src));
        if (_.Task.isPrototypeOf(TaskClass)) {
          // let task = new TaskClass(taskName)
          yield persistentTaskProvider.addTaskSource({ taskName, execution, cron: taskCronExpression, version, executionTimeLimit, src });
        }
        return 'ok';
      } catch (err) {
        return err.message;
      }
    });

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })();
};

const config = ({ roles, twoFactor }) => {
  return {
    description: 'Create task defined',
    validate: {
      payload: {
        src: _joi2.default.string().required()
      }
    },
    plugins: {
      'porg-auth': {
        type: 'user-session',
        twoFactor,
        roles
      }
    }
  };
};

exports.default = { handler, config };
module.exports = exports['default'];